# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "fill")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ...density...))
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ..density..))
posn_d <- position_dodge(width = 0.2)
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = posn_d, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge",  alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1) +
geom_histogram(binwidth = 1, position = "identity", aes(fill = cyl))
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 2)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Change the position argument to "identity" and set alpha to 0.4
ggplot(mtcars, aes(x = mpg, fill = am)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Change fill to cyl
ggplot(mtcars, aes(x = mpg, fill = cyl)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line() +
geom_rect(data = recess, inherit.aes = FALSE,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
fill = "red", alpha = 0.2)
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
par(2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(1,2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
?par
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(op)
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
myColors <- c("#1B9E77", "#D95F02", "#7570B3", "black")
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
brewer.pal(3, "Dark2")
library(RColorBrewer)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
getwd()
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/USDA.csv")
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Stock Dynamics/CocaColaStock.csv")
iris
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/State Data (OPTIONAL)")
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
View(statedata)
str(statedata)
plot(statedata$x, statedata$y)
tapply(statedata$HS.Grad, statedata$state.area, max)
max(tapply(statedata$HS.Grad, statedata$state.area, mean))
max(tapply(statedata$HS.Grad, statedata$division.area, mean))
max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.region, mean))
?boxplot
boxplot(Murder ~ region, data = statedata)
boxplot(Murder ~ state.region, data = statedata)
subset(statedata$Murder, statedata$state.region == "Northeast")
subset(statedata, statedata$state.region == "Northeast")
str(statedata)
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Poupulation + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LifeModel)
LinReg <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LinReg)
plot(statedata$Income, statedata$Life.Exp)
LinReg2 <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg2)
LinReg3 <- lm(Life.Exp ~ Population + Income +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg3)
LinReg4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(LinReg4)
predict(LinReg4)
sort(predict(LinReg4))
which.min(statedata$Life.Exp)
statedata$state.division[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp)]
sort(predict(LinReg4))
statedata$state.name[which.max(statedata$Life.Exp)]
predict(LinReg4)$residuals
predict(LinReg4)$residual
predict(LinReg4)
str(predict(LinReg4))
sort(abs(predict(LinReg4)-statedata$Life.Exp))
sort(abs(LinReg4$residuals))
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/Forecasting Elantra Sales (OPTIONAL)")
elantra <- read.csv("elantra.csv")
elantraTrain <- subset(elantra, Year <= 2012)
elantraTest<- subset(elantra, Year > 2012)
View(elantraTest)
View(elantraTest)
summary(elantraTrain)
str(elantraTrain)
ElaReg <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElaReg)
ElantraLM <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM)
ElantraLM2 <- lm(ElantraSales ~ Month + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM2)
110.69 * 2
110.69 * 5
110.69 * 4
ElantraLM3 <- lm(ElantraSales ~ as.factor(Month) + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
elantraTest$MonthFactor = as.factor(elantraTest$Month)
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
cor(elantraTrain)
elantraTrain <- subset(elantra, Year <= 2012)
cor(elantraTrain)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
cor(elantraTrain)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(elantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
ElantraLM4 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy, data = elantraTrain)
summary(ElantraLM4)
ElantraPre <- predict(ElantraLM4, newdata = elantraTest)
sum((ElantraPre - elantraTest$ElantraSales))
sum((ElantraPre - elantraTest$ElantraSales)^2)
mean(elantraTrain$ElantraSales)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
1-(SSE/SST)
SST = sum((ElantraPre - mean(elantraTrain$ElantraSales))^2)
1-(SSE/SST)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
SST = sum((ElantraPre - 14462.25)^2)
1-(SSE/SST)
1-SSE/SST
SST = sum((elantraTest$ElantraSales - 14462.25)^2)
1-SSE/SST
sort(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest$Month[14]
elantraTest[14, ]
max(abs(ElantraPre - elantraTest$ElantraSales))
which.max(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest[5, ]
setwd("/Users/ElsaW/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 6 Homework")
kos = read.csv("dailykos.csv")
str(kos)
kosDist = dist(kos, method = "euclidean")
kosHierClust = hclust(kosDist, method="ward.D")
str(kosDist)
plot(kosHierClust)
clustterkos = cutree(kosHierClust, k = 7)
clustterkos
table(clustterkos)
HierCluster = split(dailykos, hierGroups)
HierCluster = split(kos, hierGroups)
HierCluster = split(kos, clustterkos)
HierCluster[1]
HierCluster[[1]
]
HierCluster[[1]]
tail(sort(colMeans(HierCluster[1])))
tail(sort(colMeans(HierCluster[[1]])))
tail(sort(colMeans(HierCluster[[2]])))
tapply(HierCluster, 1:7, tail(sort(colMeans)))
tapply(HierCluster, 1:7, colMeans)
tail(sort(colMeans(HierCluster[[3]])))
tail(sort(colMeans(HierCluster[[24]])))
tail(sort(colMeans(HierCluster[[4]])))
tail(sort(colMeans(HierCluster[[5]])))
tail(sort(colMeans(HierCluster[[6]])))
tail(sort(colMeans(HierCluster[[7]])))
set.seed(1000)
KMC = kmeans(kos, centers = k)
k = 7
k = 7
set.seed(1000)
KMC = kmeans(kos, centers = k)
kosCluster = KMC$cluster
kosCluster[3]
kosCluster
table(kosCluster)
KmeansCluster = split(dailykos, KmeansCluster$cluster)
KmeansCluster = split(kos, KmeansCluster$cluster)
KmeansCluster = split(kos, kosCluster)
KmeansCluster[[1]]
tail(sort(colMeans(KmeansCluster[[1]])))
tail(sort(colMeans(KmeansCluster[[2]])))
tail(sort(colMeans(KmeansCluster[[3]])))
tail(sort(colMeans(KmeansCluster[[4]])))
tail(sort(colMeans(KmeansCluster[[5]])))
tail(sort(colMeans(KmeansCluster[[6]])))
tail(sort(colMeans(KmeansCluster[[7]])))
table(HierCluster, KmeansCluster)
table(HierCluster)
HierCluster
tail(sort(colMeans(KmeansCluster[[2]])))
table(kosCluster)
table(clustterkos)
tail(sort(colMeans(KmeansCluster[[2]])))
table(HierCluster[[2]], table(HierCluster[[1]])
table(HierCluster[[2]], table(HierCluster[[1]]))
table(HierCluster[[2]], table(HierCluster[[1]]))
table(HierCluster[[2]], HierCluster[[1]])
table(HierCluster[[2]])
table(HierCluster)
table(hierGroups, KmeansCluster$cluster)
table(clustterkos)
table(clustterkos, KmeansCluster$cluster)
table(KmeansCluster$cluster)
table(KmeansCluster$cluster)
table(kosCluster)
table(clustterkos)
table(clustterkos, kosCluster)
setwd("/Users/ElsaW/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 6 Homework")
airlines = read.csv("AirlinesCluster.csv")
summary(airlines)
library(caret)
library(lattice)
library(ggplot2)
library(caret)
preproc = preProcess(airlines)
head(preproc)
airlinesNorm = predict(preproc, airlines)
summary(airlinesNorm)
## 2 Hierarchical Clustering
airlinesDist = dist(airlinesNorm, method = "eucidean")
airlinesDist = dist(airlinesNorm, method = "euclidean")
airlinesHierCluster = hclust(airlinesDist, method = "ward.D")
plot(airlinesHierCluster)
rect.hclust(airlinesHierCluster, k = 6, border = "red")
airCluster = cutree(airlinesHierCluster, k = 5)
table(airCluster)
airHierGroup = split(airlines, airCluster)
airHierGroup[[1]]
clusterGroups = cutree(airlinesHierCluster, k = 5)
table(clusterGroups)
HierCluster = split(airlinesNorm, clusterGroups)
head(HierCluster)
str(HierCluster)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$QualMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
HierCluster = split(airlinesNorm, clusterGroups)
HierCluster[[1]]
summary(HierCluster[[1]])
HierCluster = split(airlines, clusterGroups)
summary(HierCluster[[1]])
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$QualMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
summary(HierCluster[[1]])
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
summary(HierCluster[[1]])
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
colMeans(subset(airlines, clusterGroups == 1))
colMeans(subset(airlines, clusterGroups == 2))
colMeans(subset(airlines, clusterGroups == 3))
lapply(split(airlines, clusterGroups), colMeans)
lapply(split(airlines, clusterGroups), colMeans)
tapply(airlines$Balance, clusterGroups, mean)
tapply(airlines$QualMiles, clusterGroups, mean)
tapply(airlines$BonusMiles, clusterGroups, mean)
tapply(airlines$BonusTrans, clusterGroups, mean)
tapply(airlines$FlightMiles, clusterGroups, mean)
tapply(airlines$FlightTrans, clusterGroups, mean)
tapply(airlines$DaysSinceEnroll, clusterGroups, mean)
set.seed(88)
k = 5
set.seed(88)
KMC = kmeans(airlinesNorm, centers = k, iter.max = 1000)
table(KMC)
table(KMC$cluster)
KmeasCluster = split(airlines, KMC$cluster)
KmeansCluster = split(airlines, KMC$cluster)
KmeansCluster[[1]]
table(KMC$cluster, clusterGroups)
KMC$centers
colMeans(subset(airlines, clusterGroups == 1))
colMeans(subset(airlinesNorm, clusterGroups == 2))
KMC$centers
colMeans(subset(airlinesNorm, clusterGroups == 2))
setwd("/Users/ElsaW/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 6 Homework")
stocks = read.csv("StocksCluster.csc")
stocks = read.csv("StocksCluster.csv")
str(stocks)
sum(stocks$PositiveDec == 1)
table(stocks$PositiveDec)
mean(stocks$PositiveDec == 1)
cor(stocks[:1:11])
cor(stocks[,1:11])
max(cor(stocks[,1:11]))
sort(cor(stocks[,1:11]))
which.max(stocks[,1:11])
tapply(stocks, mean)
summary(stocks)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~., data = stocksTrain, family = "binomial")
table(stocksTrain$PositiveDec, predict(StocksModel))
table(stocksTrain$PositiveDec, predict(StocksModel) >= 0.5)
(3324+737)/nrow(stocksTrain)
StocksModel = glm(PositiveDec ~., data = stocksTrain, family = binomial)
table(stocksTrain$PositiveDec, predict(StocksModel, method = response) >= 0.5)
table(stocksTrain$PositiveDec, predict(StocksModel, type = response) >= 0.5)
table(stocksTrain$PositiveDec, predict(StocksModel, type = "response") >= 0.5)
(990+3640)/nrow(stocksTrain)
table(stocksTrain$PositiveDec, predict(StocksModel, newdata = stocksTest, type = "response") >= 0.5)
table(stocksTest$PositiveDec, predict(StocksModel, newdata = stocksTest, type = "response") >= 0.5)
(417+1553)/nrow(stocksTest)
table(stocksTest$PositiveDec)
mean(stocksTest$PositiveDec)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
mean(normTrain$ReturnJan)
summary(normTest)
summary(normTrain)
k = 3
set.seed(144)
km = kmeans(norTrain, centers = k)
km = kmeans(normTrain, centers = k)
table(km$cluster)
library(flexclust)
library(grid)
library(modeltools)
library(stats4)
library(flexclust)
km.kcca = as.kcca(km, normTrain)
clusterTrain = predict(km.kcca)
clusterTest = predict(km.kcca, newdata=normTest)
str(clusterTest)
table(clusterTest)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
tapply(stocksTrain$PositiveDec, clusterTrain, mean)
StocksModel1 = glm(PositiveDec ~., data = stocksTrain1, family = binomial)
StocksModel2 = glm(PositiveDec ~., data = stocksTrain2, family = binomial)
StocksModel3 = glm(PositiveDec ~., data = stocksTrain3, family = binomial)
sapply(c(StocksModel1, StocksModel2, StocksModel3), summary)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
summary(StocksModel1$coefficients)
PredictTest1 = predict(StocksModel1, newdata = stocksTest1, type = "response")
PredictTest2 = predict(StocksModel2, newdata = stocksTest2, type = "response")
PredictTest3 = predict(StocksModel3, newdata = stocksTest3, type = "response")
table(stocksTest1$PositiveDec, PredictTest1 >= 0.5)
(774+30)/nrow(stocksTest1)
table(stocksTest2$PositiveDec, PredictTest2 >= 0.5)
(757+388)/nrow(stocksTest2)
table(stocksTest3$PositiveDec, PredictTest3 >= 0.5)
(13+49)/nrow(stocksTest3)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(AllPredictions, AllOutcomes >= 0.5)
table(AllOutcomes, AllPredictions >= 0.5)
(1544+467)/(467+1110+353+1544)
