summary(LinReg)
plot(statedata$Income, statedata$Life.Exp)
LinReg2 <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg2)
LinReg3 <- lm(Life.Exp ~ Population + Income +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg3)
LinReg4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(LinReg4)
predict(LinReg4)
sort(predict(LinReg4))
which.min(statedata$Life.Exp)
statedata$state.division[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp)]
sort(predict(LinReg4))
statedata$state.name[which.max(statedata$Life.Exp)]
predict(LinReg4)$residuals
predict(LinReg4)$residual
predict(LinReg4)
str(predict(LinReg4))
sort(abs(predict(LinReg4)-statedata$Life.Exp))
sort(abs(LinReg4$residuals))
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/Forecasting Elantra Sales (OPTIONAL)")
elantra <- read.csv("elantra.csv")
elantraTrain <- subset(elantra, Year <= 2012)
elantraTest<- subset(elantra, Year > 2012)
View(elantraTest)
View(elantraTest)
summary(elantraTrain)
str(elantraTrain)
ElaReg <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElaReg)
ElantraLM <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM)
ElantraLM2 <- lm(ElantraSales ~ Month + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM2)
110.69 * 2
110.69 * 5
110.69 * 4
ElantraLM3 <- lm(ElantraSales ~ as.factor(Month) + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
elantraTest$MonthFactor = as.factor(elantraTest$Month)
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
cor(elantraTrain)
elantraTrain <- subset(elantra, Year <= 2012)
cor(elantraTrain)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
cor(elantraTrain)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(elantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
ElantraLM4 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy, data = elantraTrain)
summary(ElantraLM4)
ElantraPre <- predict(ElantraLM4, newdata = elantraTest)
sum((ElantraPre - elantraTest$ElantraSales))
sum((ElantraPre - elantraTest$ElantraSales)^2)
mean(elantraTrain$ElantraSales)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
1-(SSE/SST)
SST = sum((ElantraPre - mean(elantraTrain$ElantraSales))^2)
1-(SSE/SST)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
SST = sum((ElantraPre - 14462.25)^2)
1-(SSE/SST)
1-SSE/SST
SST = sum((elantraTest$ElantraSales - 14462.25)^2)
1-SSE/SST
sort(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest$Month[14]
elantraTest[14, ]
max(abs(ElantraPre - elantraTest$ElantraSales))
which.max(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest[5, ]
load("~/Documents/MOOC/1.MITx - 15.071x The Analytics Edge/Kaggle Competition/Kcompetition_imputed.RData")
ggplot(resultplot, aes(Percent, rate)) + geom_smooth()
library(ggplot2)
ggplot(resultplot, aes(Percent, rate)) + geom_smooth()
resultplot = NA
for (i in seq(0, 1, 0.001)) {
test = mean(rowSums(!is.na(train[, 8:108]))/101 >= i)
out = data.frame("rate" = i
, "Percent" = test)
resultplot = rbind(resultplot, out)
}
ggplot(resultplot, aes(Percent, rate)) + geom_smooth()
ggplot(resultplot, aes(Percent, rate)) + geom_smooth()
mean(rowSums(!is.na(train[, 8:108]))/101 = 0)
mean(rowSums(!is.na(train[, 8:108]))/101 <= 0)
rowSums(!is.na(train[, 8:108]))/101 <= 0
which(rowSums(!is.na(train[, 8:108]))/101 <= 0)
which(rowSums(!is.na(train[, 8:108]))/101 <= 1)
which(rowSums(!is.na(train[, 8:108]))/101 <= 0.1)
which(rowSums(!is.na(train[, 8:108]))/101 <= 0.1)
train[which(rowSums(!is.na(train[, 8:108]))/101 <= 0.1), ]
train[which(rowSums(!is.na(train[, 8:108]) = 1)]
train[which(rowSums(!is.na(train[, 8:108])) = 1)]
train[which(rowSums(!is.na(train[, 8:108])) <= 1)]
train[which(rowSums(!is.na(train[, 8:108])) == 1)]
train[which(rowSums(!is.na(train[, 8:108])) = 1)]
train[which(rowSums(!is.na(train[, 8:108])) == 0)]
rowSums(!is.na(train[, 8:108]))
rowSums(!is.na(train[, 8:108])) == 1
train[rowSums(!is.na(train[, 8:108])) == 1]
train[rowSums(!is.na(train[, 8:108])) == 1, ]
train[which(rowSums(!is.na(train[, 8:108])) == 0), ]
train[which(rowSums(!is.na(train[, 8:108])) == 1), ]
Response0 = subset(train, rowSums(!is.na(train[, 8:108])) == 1)
Response0 = subset(train, rowSums(!is.na(train[, 8:108])) == 0)
Response1 = subset(train, rowSums(!is.na(train[, 8:108])) == 0)
Response1 = subset(train, rowSums(!is.na(train[, 8:108])) == 1)
Response0[,2:9]
Response0[,2:7]
RegMod.response0 = glm(Party ~ . -USER_ID, data = Response0, family = binomial)
RegMod.response0 = glm(Party ~ . -USER_ID, data = Response0, family = binomial)
resultplot = NA
for (i in seq(0, 1, 0.0001)) {
test = mean(rowSums(!is.na(train[, 8:108]))/101 >= i)
out = data.frame("rate" = i
, "Percent" = test)
resultplot = rbind(resultplot, out)
}
ggplot(resultplot, aes(Percent, rate)) + geom_smooth()
ggplot(resultplot, aes(Percent, rate)) + geom_point()
ggplot(resultplot, aes(Percent, rate)) + geom_line()
library("FactorMineR")
install.packages("FactorMineR")
install.packages("~/Desktop/FactoMineR_1.33.tgz", repos = NULL, type = .Platform$pkgType)
library(FactoMineR)
RegMod.response0 = glm(Party ~ . -USER_ID, data = Response0, family = binomial)
library(randomForest)
RFmod = randomForest(party ~ . -USER_ID, data = train, nodesize = 25, ntree = 200)
RFmod = randomForest(Party ~ . -USER_ID, data = train, nodesize = 25, ntree = 200)
RFmod = randomForest(Party ~ . -USER_ID, data = train, nodesize = 25, ntree = 100)
hist(train$Party)
hist(table(train$Party))
table(train$Party)
RFmod = randomForest(Party ~ . -USER_ID, data = train)
RFmod = randomForest(Party ~ . -USER_ID, data = train)
RFmod = randomForest(Party ~ . -USER_ID, data = train, nodesize = 25, ntree = 200, na.action = na.omit)
varImpPlot(RFmod)
sum(is.na(train))/(101*nrow(train))
sum(is.na(train))/(101*nrow(train))
RFmod = randomForest(Party ~ . -USER_ID, data = train, na.action = na.omit)
varImpPlot(RFmod)
RFmod = randomForest(Party ~ . -USER_ID, data = train_imputed, na.action = na.omit)
varImpPlot(RFmod)
getwd()
setwd("~/Users/ElsaW/Documents/MOOC/MOOC_Completed/MITx - 15.071x The Analytics Edge/Final Exam")
setwd("/Users/ElsaW/Documents/MOOC/MOOC_Completed/MITx - 15.071x The Analytics Edge/Final Exam")
fedFunds <- read.csv("federalFundsRate.csv", stringsAsFactors=FALSE)
str(fedFunds)
mean(fedFunds$RaisedFedFunds)
table(fedFunds$Chairman, fedFunds$RaisedFedFunds)
fedFunds$Chairman <- as.factor(fedFunds$Chairman)
fedFunds$DemocraticPres <- as.factor(fedFunds$DemocraticPres)
fedFunds$RaisedFedFunds <- as.factor(fedFunds$RaisedFedFunds)
set.seed(201)
library(caTools)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
training <- sample.split(fedFunds, spl == T)
training <- sample.split(fedFunds, spl = T)
training <- subset(fedFunds, spl == T)
testing <- subset(fedFunds, spl == F)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
training <- subset(fedFunds, spl == T)
testing <- subset(fedFunds, spl == F)
?glm
DemocraticPres + MonthsUntilElection, data = training, family = 'binomial')
log <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate +
DemocraticPres + MonthsUntilElection, data = training, family = 'binomial')
summary(log)
fedFunds <- read.csv("federalFundsRate.csv", stringsAsFactors=FALSE)
fedFunds$Chairman <- as.factor(fedFunds$Chairman)
fedFunds$DemocraticPres <- as.factor(fedFunds$DemocraticPres)
fedFunds$RaisedFedFunds <- as.factor(fedFunds$RaisedFedFunds)
set.seed(201)
library(caTools)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
training <- subset(fedFunds, spl == T)
testing <- subset(fedFunds, spl == F)
log <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate +
DemocraticPres + MonthsUntilElection, data = training, family = 'binomial')
summary(log)
str(fedFunds)
summary(log)
(-0.136451 + 65.3) + (0.347829 * 0) + (-0.006931 * 18)
p6predict = 9.121012 + (-0.003427 * 1.7) + (-3*0.157658) + (-0.047449*5.1) +
(-0.136451 + 65.3) + (0.347829 * 0) + (-0.006931 * 18)
p6predict
9.121012 + (-0.003427 * 1.7) + (-3*0.157658) + (-0.047449*5.1) + (-0.136451 + 65.3) + (0.347829 * 0) + (-0.006931 * 18)
log <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate +
DemocraticPres + MonthsUntilElection, data = training, family = 'binomial')
summary(log)
9.121012 + (-0.003427 * 1.7) + (-3*0.157658) + (-0.047449*5.1) + (-0.136451 * 65.3) + (0.347829 * 0) + (-0.006931 * 18)
9.121012 + (-0.003427 * 1.7) + (-3*0.157658) + (-0.047449*5.1) + (-0.136451 * 65.3)  + (-0.006931 * 18)
fedFunds <- read.csv("federalFundsRate.csv", stringsAsFactors=FALSE)
fedFunds$Chairman <- as.factor(fedFunds$Chairman)
fedFunds$DemocraticPres <- as.factor(fedFunds$DemocraticPres)
fedFunds$RaisedFedFunds <- as.factor(fedFunds$RaisedFedFunds)
str(fedFunds)
set.seed(201)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
training <- subset(fedFunds, spl == T)
testing <- subset(fedFunds, spl == F)
log <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate +
DemocraticPres + MonthsUntilElection, data = training, family = 'binomial')
summary(log)
log <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate +
DemocraticPres + MonthsUntilElection, data = training, family="binomial")
summary(log)
training <- subset(fedFunds, spl = T)
training <- subset(fedFunds, spl == T)
summary(log)
setwd("/Users/ElsaW/Documents/MOOC/MOOC_Completed/MITx - 15.071x The Analytics Edge/Final Exam")
fedFunds <- read.csv("federalFundsRate.csv", stringsAsFactors=FALSE)
fedFunds$Chairman <- as.factor(fedFunds$Chairman)
fedFunds$DemocraticPres <- as.factor(fedFunds$DemocraticPres)
fedFunds$RaisedFedFunds <- as.factor(fedFunds$RaisedFedFunds)
library(caTools)
set.seed(201)
spl = sample.split(fedFunds$RaisedFedFunds, 0.7)
training <- subset(fedFunds, spl == T)
testing <- subset(fedFunds, spl == F)
mod1 <- glm(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, family="binomial")
summary(mod1)
log <- 9.121012 + (-0.003427 * 1.7) + (-3*0.157658) + (-0.047449*5.1) + (-0.136451 * 65.3)  + (-0.006931 * 18)
log
rm(log)
a <- 9.121012 + (-0.003427 * 1.7) + (-3*0.157658) + (-0.047449*5.1) + (-0.136451 * 65.3)  + (-0.006931 * 18)
log(10)
log(e)
log(exp(1))
exp(-a)
1/(1+exp(-a))
summary(mod1)
1/(1+exp(0.347829))
odds <- exp(0.347829)
odds
?predict
pred <- predict(mod1, newdata = testing)
head(pred)
table(testing$RaisedFedFunds)
table(training$RaisedFedFunds)
table(testing$RaisedFedFunds, pred >= 0.5)
175-31-80
175-38
pred <- predict(mod1, newdata = testing, type="response")
head(pred)
table(training$RaisedFedFunds)
table(testing$RaisedFedFunds, pred >= 0.5)
library(ROCR)
install.packages(""ROCR)
install.packages("ROCR")
library(ROCR)
library(gplots)
library(ROCR)
as.numeric(performance(prediction(pred, testing$RaisedFedFunds), "auc")@y.values)
plot(performance(prediction(pred, testing$RaisedFedFunds),"tpr", "fpr"), colorize = T)
library(caret)
library(lattice)
library(ggplot2)
library(caret)
library(e1071)
set.seed(201)
Gr <- expand.grid(.cp = seq(0.001, 0.05, 50)
Gr <- expand.grid(.cp = seq(0.001, 0.05, 50))
seq(0.001, 0.05, 50)
seq(0.001, 50, 0.05)
Gr <- expand.grid(.cp = seq(0.001, 0.001, 0.05))
seq(0.001, 0.001, 0.05)
seq(0.001, 0.05, 0.001)
Gr <- expand.grid(.cp = seq(0.001, 0.05, 0.001))
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl = trC, tuneGrid = Gr)
trC <- trainControl(method = "cv", number = 10)
Gr <- expand.grid(.cp = seq(0.001, 0.05, 0.001))
train(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "rpart", trControl = trC, tuneGrid = Gr)
library(rpart)
library(rpart.plot)
cart <- rpart(RaisedFedFunds ~ PreviousRate + Streak + Unemployment + HomeownershipRate + DemocraticPres + MonthsUntilElection, data = training, method = "class", cp = 0.016)
prp(cart)
predcart <- predict(cart, newdata = testing, type = "class")
table(predcart, testing$RaisedFedFunds)
(48+64)/nrow(testing)
setwd("/Users/ElsaW/Documents/MOOC/MOOC_Completed/MITx - 15.071x The Analytics Edge/Final Exam")
households <- read.csv("Households.csv")
head(households)
households[MorningPct == 100]
households[households$MorningPct == 100]
households[households$MorningPct == 100, ]
households[households$AfternoonPct == 100, ]
nrow(households[households$MorningPct == 100, ])
nrow(households[households$AfternoonPct == 100, ])
min(households$AvgDiscount[households$AvgSalesValue >= 150])
min(households$AvgSalesValue[households$AvgDiscount >= 25])
table(households$NumVisits >= 300)
148/nrow(households)
head(households)
summary(households)
library(caret)
preproc = preProcess(households)
HouseholdsNorm = predict(preproc, households)
head(HouseholdsNorm)
summary(HouseholdsNorm)
set.seed(200)
distances <- dist(HouseholdsNorm, method = "euclidean")
ClusterShoppers <- hclust(distances, method = "ward.D")
plot(ClusterShoppers, labels = FALSE)
set.seed(200)
K <- kmeans (HouseholdsNorm, centers = 10, iter.max = 1000)
K$clusters
set.seed(200)
library (flexclust)
library(grid)
library(modeltools)
library(stats4)
library (flexclust)
set.seed(200)
K <- kmeans (HouseholdsNorm, centers = 10, iter.max = 1000)
K$clusters
K <- kmeans (HouseholdsNorm, centers = 10)
K$clusters
K$centers
K$size
max(K$size)
table(K$clusters)
K <- kmeans (HouseholdsNorm, centers = 10)
str(K)
table(K$clusters == 1)
table(K$cluster)
K$cluster
set.seed(200)
K <- kmeans (HouseholdsNorm, centers = 10)
K$cluster
K$size
K$centers
max(K$centers[MorningPct])
str(K$centers)
max(K$centers["MorningPct"])
K$centers["MorningPct"]
K$centers[, "MorningPct"]
max(K$centers[, "MorningPct"])
which.max(K$centers[, "MorningPct"])
K$centers[, c("AvgDiscount", "AvgSalesValue")]
K$centers[, c("NumVisits", "AvgSalesValue")]
set.seed(5000)
K2 <- kmeans (HouseholdsNorm, centers = 5)
K2$size
K2$centers
setwd("/Users/ElsaW/Documents/MOOC/MOOC_Completed/MITx - 15.071x The Analytics Edge/Final Exam")
energy <- read.csv("energy.csv")
head(energy)
str(energy)
which.max(energy$GenTotalRenewable)
energy[which.max(energy$GenTotalRenewable),]
mean(energy$AllSourcesCO2)
mean(energy$AllSourcesCO2[energy$presidential.results == 0], na.rm = T)
mean(energy$AllSourcesCO2[energy$presidential.results == 1], na.rm = T)
mean(energy$AllSourcesNOx[energy$presidential.results == 1], na.rm = T)
mean(energy$AllSourcesNOx[energy$presidential.results == 0], na.rm = T)
mean(energy$AllSourcesNOx[energy$presidential.results == 1], na.rm = T)
cor(energy$AllSourcesCO2, energy$EsalesIndustrial, use = "complete")
cor(energy$AllSourcesSO2, energy$EsalesIndustrial, use = "complete")
cor(energy$AllSourcesNOx, energy$EsalesResidential, use = "complete")
cor(energy$AllSourcesCO2, energy$EsalesCommercial, use = "complete")
boxplot(energy$EPriceTota ~ energy$STATE)
table(energy$EPriceTota, energy$STATE)
table(mean(energy$EPriceTota), energy$STATE)
table(energy$EPriceTota, energy$STATE)
mean(table(energy$EPriceTota, energy$STATE))
tapply(energy$EPriceTotal, energy$STATE, mean)
sort(tapply(energy$EPriceTotal, energy$STATE, mean))
sort(tapply(energy$GenTotal, energy$STATE, mean))
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
str(energy)
energy$GenSolarBinary <- as.factor(energy$GenSolarBinary)
energy$GenTotalRenewableBinary <- as.factor(energy$GenTotalRenewableBinary)
energy$presidential.results <- as.factor(energy$presidential.results)
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train, family = "binomial")
summary(mod)
premod <- predict(mod, newdata = test, type = "response")
table(test$GenSolarBinary, premod >= 0.5)
(18+154)/nrow(test)
table(test$GenSolarBinary[test$STATE == 0], premod[premod$STATE == 0] >= 0.5)
str(premod)
table(test$GenSolarBinary[test$STATE == 0], premod >= 0.5)
testRep <- test["presidential.results" == 0, ]
testRep <- test[test$presidential.results == 0, ]
testDem <- test[test$presidential.results == 1, ]
preRep <- predict(mod, newdata = testRep, type = "response")
preDem <- predict(mod, newdata = testDem, type = "response")
table(testRep$GenSolarBinary, preRep >= 0.5)
(2+90)/nrow(testRep)
table(testDem$GenSolarBinary, preDem >= 0.5)
(16+64)/nrow(testDem)
train.limited <- train[ , c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")]
test.limited <- test[ , c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")]
train.norm <- preProcess(train.limited)
test.norm <- preProcess(test.limited)
train.norm <- preProcess(train.limited)
test.norm <- preProcess(test.limited)
library(flexclust)
K <- kmeans(train.norm, centers = 2)
K <- kmeans(train.norm, centers = 2, iter.max = 1000)
str(K)
K <- kmeans(train.norm, centers = 2, iter.max = 1000)
train.limited <- train[ , c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")]
test.limited <- test[ , c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")]
train.norm <- preProcess(train.limited)
test.norm <- preProcess(test.limited)
library(flexclust)
set.seed(144)
K <- kmeans(train.norm, centers = 2, iter.max = 1000)
energy <- read.csv("energy.csv")
energy$GenSolarBinary <- as.factor(energy$GenSolarBinary)
set.seed(144)
spl = sample(1:nrow(energy), size = 0.7*nrow(energy))
train = energy[spl,]
test = energy[-spl,]
mod <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train, family = "binomial")
train.limited <- train[ , c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")]
test.limited <- test[ , c("CumlRegulatory", "CumlFinancial", "presidential.results", "Total.salary", "Import")]
train.norm <- preProcess(train.limited)
test.norm <- preProcess(test.limited)
library(flexclust)
set.seed(144)
K <- kmeans(train.norm, centers = 2, iter.max = 1000)
str(train.norm)
str(train.limited)
train.norm <- predict(preProcess(train.limited), train.limited)
test.norm <- predict(preProcess(test.limited),test.limited)
library(flexclust)
set.seed(144)
K <- kmeans(train.norm, centers = 2, iter.max = 1000)
train1 <- train[K$cluster == 1]
train1 <- train[K$cluster == 1, ]
train2 <- train[K$cluster == 2, ]
K$centers
km.kcca = as.kcca(km, train.norm)
km.kcca = as.kcca(K, train.norm)
cluster.train <- predict(km.kcca)
str(cluster.train)
K$centers
tapply(train1[, "AllSourcesCO2", "AllSourcesSO2", "AllSourcesNOx"], mean)
sapply(train1[, "AllSourcesCO2", "AllSourcesSO2", "AllSourcesNOx"], mean)
mean(train1[, "AllSourcesCO2", "AllSourcesSO2", "AllSourcesNOx"])
mean(train1$AllSourcesCO2)
mean(train1$AllSourcesCO2, na.rm = T)
mean(train2$AllSourcesCO2, na.rm = T)
mod1 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train1, family = "binomial")
summary(mod1)
kt.kcca <- as.kcca(K, test.norm)
cluster.test <- predict(kt.kcca)
cluster.test
test1 <- test[cluster.test == 1, ]
premod1 <- predict(mod1, newdata = test1, type = "response")
table(test1$GenSolarBinary, premod1 >= 0.5)
(4+114)/nrow(test1)
premodtest1 <- predict(mod, newdata = test1, type = "response")
table(test1$GenSolarBinary, premodmodtest1 >= 0.5)
table(test1$GenSolarBinary, premodtest1 >= 0.5)
premodtest1 <- predict(mod, newdata = test1, type = "response")
table(test1$GenSolarBinary, premodtest1 >= 0.5)
table(test1$GenSolarBinary, premodtest1)
table(test1$GenSolarBinary, premodtest1 >= 0.5)
test1mod <- predict(mod, newdata = test1, type = "response")
table(test1$GenSolarBinary, test1mod >= 0.5)
test1mod >= 0.5
table(test1$GenSolarBinary, test1mod >= 0.5)
115/130
test1 <- test[cluster.test == 2, ]
mod2 <- glm(GenSolarBinary ~ GenHydro + GenSolar + CumlFinancial + CumlRegulatory + Total.salary + Import, data = train2, family = "binomial")
summary(mod2)
summary(mod1)
summary(mod2)
test1 <- test[cluster.test == 1, ]
test2 <- test[cluster.test == 2, ]
premod2 <- predict(mod2, newdata = test2, type = "response")
table(test2$GenSolarBinary, premod2 >= 0.5)
60/80
test2mod <- predict(mod, newdata = test2, type = "response")
table(test2$GenSolarBinary, test2mod >= 0.5)
(18+39)/80
(60+118)/nrow(test)
AllOutcomes <- c(premod1,premod2)
table(test$GenSolarBinary, AllOutcomes >= 0.5)
AllPredictions <- c(premod1,premod2)
AllOutcomes <- c(test1, test2)
table(AllOutcomes$GenSolarBinary, AllPredictions >= 0.5)
AllPredictions <- c(premod1,premod2)
AllOutcomes <- c(test1, test2)
table(AllOutcomes$GenSolarBinary, AllPredictions >= 0.5)
AllPredictions <- rbind(premod1,premod2)
AllPredictions <- c(premod1,premod2)
AllPredictions
AllOutcomes
AllOutcomes <- c(test1$GenSolarBinary, test2$GenSolarBinary)
table(AllOutcomes, AllPredictions >= 0.5)
(178)/nrow(test)
