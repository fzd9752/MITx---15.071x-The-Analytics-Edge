ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ..density..))
posn_d <- position_dodge(width = 0.2)
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = posn_d, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge",  alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1) +
geom_histogram(binwidth = 1, position = "identity", aes(fill = cyl))
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 2)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Change the position argument to "identity" and set alpha to 0.4
ggplot(mtcars, aes(x = mpg, fill = am)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Change fill to cyl
ggplot(mtcars, aes(x = mpg, fill = cyl)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line() +
geom_rect(data = recess, inherit.aes = FALSE,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
fill = "red", alpha = 0.2)
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
par(2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(1,2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
?par
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(op)
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
myColors <- c("#1B9E77", "#D95F02", "#7570B3", "black")
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
brewer.pal(3, "Dark2")
library(RColorBrewer)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
getwd()
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/USDA.csv")
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Stock Dynamics/CocaColaStock.csv")
iris
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/State Data (OPTIONAL)")
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
View(statedata)
str(statedata)
plot(statedata$x, statedata$y)
tapply(statedata$HS.Grad, statedata$state.area, max)
max(tapply(statedata$HS.Grad, statedata$state.area, mean))
max(tapply(statedata$HS.Grad, statedata$division.area, mean))
max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.region, mean))
?boxplot
boxplot(Murder ~ region, data = statedata)
boxplot(Murder ~ state.region, data = statedata)
subset(statedata$Murder, statedata$state.region == "Northeast")
subset(statedata, statedata$state.region == "Northeast")
str(statedata)
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Poupulation + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LifeModel)
LinReg <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LinReg)
plot(statedata$Income, statedata$Life.Exp)
LinReg2 <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg2)
LinReg3 <- lm(Life.Exp ~ Population + Income +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg3)
LinReg4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(LinReg4)
predict(LinReg4)
sort(predict(LinReg4))
which.min(statedata$Life.Exp)
statedata$state.division[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp)]
sort(predict(LinReg4))
statedata$state.name[which.max(statedata$Life.Exp)]
predict(LinReg4)$residuals
predict(LinReg4)$residual
predict(LinReg4)
str(predict(LinReg4))
sort(abs(predict(LinReg4)-statedata$Life.Exp))
sort(abs(LinReg4$residuals))
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/Forecasting Elantra Sales (OPTIONAL)")
elantra <- read.csv("elantra.csv")
elantraTrain <- subset(elantra, Year <= 2012)
elantraTest<- subset(elantra, Year > 2012)
View(elantraTest)
View(elantraTest)
summary(elantraTrain)
str(elantraTrain)
ElaReg <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElaReg)
ElantraLM <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM)
ElantraLM2 <- lm(ElantraSales ~ Month + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM2)
110.69 * 2
110.69 * 5
110.69 * 4
ElantraLM3 <- lm(ElantraSales ~ as.factor(Month) + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
elantraTest$MonthFactor = as.factor(elantraTest$Month)
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
cor(elantraTrain)
elantraTrain <- subset(elantra, Year <= 2012)
cor(elantraTrain)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
cor(elantraTrain)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(elantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
ElantraLM4 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy, data = elantraTrain)
summary(ElantraLM4)
ElantraPre <- predict(ElantraLM4, newdata = elantraTest)
sum((ElantraPre - elantraTest$ElantraSales))
sum((ElantraPre - elantraTest$ElantraSales)^2)
mean(elantraTrain$ElantraSales)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
1-(SSE/SST)
SST = sum((ElantraPre - mean(elantraTrain$ElantraSales))^2)
1-(SSE/SST)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
SST = sum((ElantraPre - 14462.25)^2)
1-(SSE/SST)
1-SSE/SST
SST = sum((elantraTest$ElantraSales - 14462.25)^2)
1-SSE/SST
sort(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest$Month[14]
elantraTest[14, ]
max(abs(ElantraPre - elantraTest$ElantraSales))
which.max(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest[5, ]
setwd("/Users/ElsaW/Documents/MOOC/1.MITx - 15.071x The Analytics Edge/Unit 7 Visualisation")
mvt = read.csv("mvt.csv", stringsAsFactors=FALSE)
mvt$Date = strptime(mvt$Date, format="%m/%d/%y %H:%M")
# Extract the hour and the day of the week:
mvt$Weekday = weekdays(mvt$Date)
mvt$Hour = mvt$Date$hour
WeekdayCounts = as.data.frame(table(mvt$Weekday))
DayHourCounts = as.data.frame(table(mvt$Weekday, mvt$Hour))
str(DayHourCounts)
# Convert the second variable, Var2, to numbers and call it Hour:
DayHourCounts$Hour = as.numeric(as.character(DayHourCounts$Var2))
# Create out plot:
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1))
# Change the colors
ggplot(DayHourCounts, aes(x=Hour, y=Freq)) + geom_line(aes(group=Var1, color=Var1), size=2)
library(ggplot2)
DayHourCounts$Type = ifelse((DayHourCounts$Var1 == "Sunday") | (DayHourCounts$Var1 == "Saturday"), "Weekend", "Weekday")
DayHourCounts$Var1 = factor(DayHourCounts$Var1, ordered=TRUE, levels=c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"))
library(maps)
library(ggmap)
LatLonCounts = as.data.frame(table(round(mvt$Longitude,2), round(mvt$Latitude,2)))
LatLonCounts$Long = as.numeric(as.character(LatLonCounts$Var1))
LatLonCounts$Lat = as.numeric(as.character(LatLonCounts$Var2))
str(LatLonCounts)
LatLonCounts2 = subset(LatLonCounts, Freq > 0)
str(LatLonCounts2)
1638-686
murders = read.csv("murders.csv")
str(murders)
# Load the map of the US
statesMap = map_data("state")
str(statesMap)
# Plot the map:
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
# Create a new variable called region with the lowercase names to match the statesMap:
murders$region = tolower(murders$State)
# Join the statesMap data and the murders data into one dataframe:
murderMap = merge(statesMap, murders, by="region")
str(murderMap)
# Plot the number of murder on our map of the United States:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Murders)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Plot a map of the population:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = Population)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Create a new variable that is the number of murders per 100,000 population:
murderMap$MurderRate = murderMap$Murders / murderMap$Population * 100000
# Redo our plot with murder rate:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
# Redo the plot, removing any states with murder rates above 10:
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = MurderRate)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend", limits = c(0,10))
ggplot(murderMap, aes(x = long, y = lat, group = group, fill = GunOwnership)) + geom_polygon(color = "black") + scale_fill_gradient(low = "black", high = "red", guide = "legend")
sort(table(murderMap$State, murderMap$GunOwnership))
table(murderMap$State, murderMap$GunOwnership)
str(murderMap)
setwd("/Users/ElsaW/Documents/MOOC/1.MITx - 15.071x The Analytics Edge/Unit 7 Homework")
library(ggplot2)
library(map)
library(ggmap)
library(maps)
statesMap = map_data("state")
str(statesMap)
subset(statesMap, region = "hawaii")
table(statesMap$group, StatesMap$region == "hawaii")
table(statesMap$group, statesMap$region == "hawaii")
table(statesMap$group, statesMap$region = "hawaii")
table(statesMap$group, statesMap$region == "hawaii")
subset(statesMap, region = "hawaii")
table(subset(statesMap, region = "hawaii")$group)
length(table(statesMap$group))
ggplot(statesMap, aes(x = long, y = lat, group = group)) + geom_polygon(fill = "white", color = "black")
polling = read.csv("PollingImputed.csv")
str(polling)
Train = subset(polling, Year = 2004 | Year = 2008)
Train = subset(polling, Year == 2004 | Year == 2008)
Test = subset(polling, Year == 2012)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
estPrediction = predict(mod2, newdata=Test, type="response")
TestPrediction = predict(mod2, newdata=Test, type="response")
TestPredictionBinary = as.numeric(TestPrediction > 0.5)
predictionDataFrame = data.frame(TestPrediction, TestPredictionBinary, Test$State)
table(predictionDataFrame$TestPredictionBinary)
mean(predictionDataFrame$TestPrediction)
predictionDataFrame$region = tolower(predictionDataFrame$Test.State)
predictionMap = merge(statesMap, predictionDataFrame, by = "region")
predictionMap = predictionMap[order(predictionMap$order),]
nrow(predictionMap)
nrow(statesMap)
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary)) + geom_polygon(color = "black")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPredictionBinary))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", guide = "legend", breaks= c(0,1), labels = c("Democrat", "Republican"), name = "Prediction 2012")
ggplot(predictionMap, aes(x = long, y = lat, group = group, fill = TestPrediction))+ geom_polygon(color = "black") + scale_fill_gradient(low = "blue", high = "red", name = "Prediction 2012")
TestPrediction
str(predictionMap)
predictionMap[Test.State == "Florida"]
predictionMap$Test.State[Test.State == "Florida"]
predictionMap[predictionMap$Test.State == "Florida"]
predictionMap[predictionMap$Test.State == "Florida",]
predictionMap$TestPrediction[predictionMap$Test.State == "Florida",]
?geom_polygon
mean(predictionMap$TestPrediction[predictionMap$Test.State == "Florida",])
predictionMap$TestPrediction[predictionMap$Test.State == "Florida"]
predictionMap$TestPrediction[predictionMap$Test.State == "Florida"][1]
setwd("/Users/ElsaW/Documents/MOOC/1.MITx - 15.071x The Analytics Edge/Unit 7 Visualisation")
setwd("/Users/ElsaW/Documents/MOOC/1.MITx - 15.071x The Analytics Edge/Unit 7 Homework")
edges = read.csv("edges.csv")
users = read.csv("users.csc")
users = read.csv("users.csv")
edges = read.csv("edges.csv", stringsAsFactors = F)
users = read.csv("users.csv", stringsAsFactors = F)
nrow(users)
str(edges)
146/59
str(users)
(146-59)/59
146*2/59
table(users$gender, users$school)
library(igraph)
library("igraph")
install.packages("igraph")
library(igraph)
?graph.data.frame
g = graph.data.frame(edges, FALSE, users)
g
plot(g, vertex.size=5, vertex.label=NA)
degree(g)
table(degree(g) >= 10)
V(g)$size = degree(g)/2+2
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$school = "black"
V(g)$school[V(g)$school == "A"] = "blue"
V(g)$school[V(g)$school == "AB"] = "orange"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "blue"
V(g)$color[V(g)$school == "AB"] = "orange"
plot(g, vertex.label=NA)
str(users)
table(users$school)
V(g)$color[V(g)$school == "A"] = "green"
V(g)$color[V(g)$school == "AB"] = "orange"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "gray"
plot(g, vertex.label=NA)
V(g)$color = "black"
V(g)$color[V(g)$gender == "A"] = "red"
V(g)$color[V(g)$gender == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color = "black"
g = graph.data.frame(edges, FALSE, users)
V(g)$color = "black"
V(g)$color[V(g)$school == "A"] = "red"
V(g)$color[V(g)$school == "AB"] = "gray"
plot(g, vertex.label=NA)
V(g)$size = degree(g)/2+2
plot(g, vertex.label=NA)
table(users$locale)
V(g)$color[V(g)$locale == "B"] = "gray"
plot(g, vertex.label=NA)
V(g)$color[V(g)$locale == "A"] = "red"
V(g)$color[V(g)$locale == "B"] = "gray"
plot(g, vertex.label=NA)
?igraph.plotting
tweets = read.csv("tweets.csv")
tweets = read.csv("tweets.csv", stringAsFactors = F)
tweets = read.csv("tweets.csv", stringsAsFactors = F)
library(tm)
corpus = Corpus(tweets)
tweets = read.csv("tweets.csv", stringsAsFactors = F)
corpus = Corpus(tweets$Tweet)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus, stemDocument)
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
nrow(allTweets)
str(allTweets)
tweets = read.csv("tweets.csv", stringsAsFactors = F)
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
str(allTweets)
nrow(allTweets)
ncol(allTweets)
install.packages("wordcloud")
library(wordcloud)
library(RColorBrewer)
library(wordcloud)
?wordcloud
wordcloud(colnames(allTweets), colSums(allTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25))
corpus = Corpus(VectorSource(tweets$Tweet))
corpus = tm_map(corpus, tolower)
corpus = tm_map(corpus, PlainTextDocument)
corpus = tm_map(corpus, removePunctuation)
corpus = tm_map(corpus, removeWords, stopwords("english"))
corpus = tm_map(corpus. removeWords, "apple")
?tm_map
corpus = tm_map(corpus. removeWords, c("apple"))
corpus = tm_map(corpus. removeWords, c("apple"))
corpus = tm_map(corpus, removeWords, c("apple"))
dtm = DocumentTermMatrix(corpus)
allTweets = as.data.frame(as.matrix(dtm))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25))
negativeTweets = subset(allTweets, tweets$Avg <= -1)
wordcloud(colnames(negativeTweets), colSums(negativeTweets))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = brewer.pal(Accent))
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = brewer.pal("Accent"))
display.brewer.all()
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = "Accent")
brewer.pal()
brewer.pal(Set2)
brewer.pal("Set2")
brewer.pal(name = "Set2")
brewer.pal(name = Set2)
display.brewer.all()
brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)]
brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)]
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = brewer.pal(9, "Blues")[c(-5, -6, -7, -8, -9)])
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = brewer.pal(9, "Blues")[c(-1, -2, -3, -4)])
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = brewer.pal(9, "Blues")[c(1, 2, 3, 4)])
wordcloud(colnames(allTweets), colSums(allTweets), scale=c(2, 0.25), colors = brewer.pal(9, "Blues")[c(5, 6, 7, 8, 9)])
setwd("/Users/ElsaW/Documents/MOOC/1.MITx - 15.071x The Analytics Edge/Unit 7 Homework")
parole = read.csv("parole.csv")
parole$male = as.factor(parole$male)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
1-mean(parole$male)
mean(parole$male)
table(parole$male)
130/675
parole = read.csv("parole.csv")
1-mean(parole$male)
parole$male = as.factor(parole$male)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
1-mean(as.numeric(as.character(parole$male)))
mean(as.numeric(as.character(parole$male)))
table(parole$male, parole$violator)
14/78
table(parole$crime, parole$state == "Kentucky")
library(ggplot2)
ggplot(parole, aes(x = age)) + geom_histogram()
ggplot(parole, aes(x = age)) + geom_histogram(binwidth = 5)
ggplot(parole, aes(x = age)) + geom_histogram(color = "blue", binwidth = 5)
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5) + facet_grid(male ~ .)
ggplot(data = parole, aes(x = age)) + geom_histogram(binwidth = 5) + facet_grid(.~ male)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5)
colorPalette = c("#000000", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5) + scale_fill_manual(values=colorPalette)
ggplot(data = parole, aes(x = age, fill = male)) + geom_histogram(binwidth = 5, position="identity", alpha = 0.5) + scale_fill_manual(values=colorPalette)
ggplot(parole, aes(x = time.served)) + geom_histogram(binwidth = 1)
ggplot(parole, aes(x = time.served)) + geom_histogram(binwidth = 0.1)
ggplot(parole, aes(x = time.served)) + geom_histogram(binwidth = 1) + facet_grid(~. crime)
ggplot(parole, aes(x = time.served)) + geom_histogram(binwidth = 1) + facet_grid(.~ crime)
ggplot(parole, aes(x = time.served, fill = crime)) + geom_histogram(binwidth = 1, position = "identity", alpha = 0.3)
