ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
mtcars$cyl <- as.numeric(mtcars$cyl)
str(mtcars)
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am)) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am)) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "fill")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ...density...))
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ..density..))
posn_d <- position_dodge(width = 0.2)
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = posn_d, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge",  alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1) +
geom_histogram(binwidth = 1, position = "identity", aes(fill = cyl))
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 2)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Change the position argument to "identity" and set alpha to 0.4
ggplot(mtcars, aes(x = mpg, fill = am)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Change fill to cyl
ggplot(mtcars, aes(x = mpg, fill = cyl)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line() +
geom_rect(data = recess, inherit.aes = FALSE,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
fill = "red", alpha = 0.2)
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
par(2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(1,2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
?par
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(op)
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
myColors <- c("#1B9E77", "#D95F02", "#7570B3", "black")
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
brewer.pal(3, "Dark2")
library(RColorBrewer)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
getwd()
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/USDA.csv")
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Stock Dynamics/CocaColaStock.csv")
iris
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/State Data (OPTIONAL)")
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
View(statedata)
str(statedata)
plot(statedata$x, statedata$y)
tapply(statedata$HS.Grad, statedata$state.area, max)
max(tapply(statedata$HS.Grad, statedata$state.area, mean))
max(tapply(statedata$HS.Grad, statedata$division.area, mean))
max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.region, mean))
?boxplot
boxplot(Murder ~ region, data = statedata)
boxplot(Murder ~ state.region, data = statedata)
subset(statedata$Murder, statedata$state.region == "Northeast")
subset(statedata, statedata$state.region == "Northeast")
str(statedata)
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Poupulation + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LifeModel)
LinReg <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LinReg)
plot(statedata$Income, statedata$Life.Exp)
LinReg2 <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg2)
LinReg3 <- lm(Life.Exp ~ Population + Income +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg3)
LinReg4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(LinReg4)
predict(LinReg4)
sort(predict(LinReg4))
which.min(statedata$Life.Exp)
statedata$state.division[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp)]
sort(predict(LinReg4))
statedata$state.name[which.max(statedata$Life.Exp)]
predict(LinReg4)$residuals
predict(LinReg4)$residual
predict(LinReg4)
str(predict(LinReg4))
sort(abs(predict(LinReg4)-statedata$Life.Exp))
sort(abs(LinReg4$residuals))
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/Forecasting Elantra Sales (OPTIONAL)")
elantra <- read.csv("elantra.csv")
elantraTrain <- subset(elantra, Year <= 2012)
elantraTest<- subset(elantra, Year > 2012)
View(elantraTest)
View(elantraTest)
summary(elantraTrain)
str(elantraTrain)
ElaReg <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElaReg)
ElantraLM <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM)
ElantraLM2 <- lm(ElantraSales ~ Month + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM2)
110.69 * 2
110.69 * 5
110.69 * 4
ElantraLM3 <- lm(ElantraSales ~ as.factor(Month) + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
elantraTest$MonthFactor = as.factor(elantraTest$Month)
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
cor(elantraTrain)
elantraTrain <- subset(elantra, Year <= 2012)
cor(elantraTrain)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
cor(elantraTrain)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(elantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
ElantraLM4 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy, data = elantraTrain)
summary(ElantraLM4)
ElantraPre <- predict(ElantraLM4, newdata = elantraTest)
sum((ElantraPre - elantraTest$ElantraSales))
sum((ElantraPre - elantraTest$ElantraSales)^2)
mean(elantraTrain$ElantraSales)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
1-(SSE/SST)
SST = sum((ElantraPre - mean(elantraTrain$ElantraSales))^2)
1-(SSE/SST)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
SST = sum((ElantraPre - 14462.25)^2)
1-(SSE/SST)
1-SSE/SST
SST = sum((elantraTest$ElantraSales - 14462.25)^2)
1-SSE/SST
sort(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest$Month[14]
elantraTest[14, ]
max(abs(ElantraPre - elantraTest$ElantraSales))
which.max(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest[5, ]
Sys.setlocale("LC_ALL", "C")
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge")
save.image("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/MITx - 15.071x The Analytics Edge.RData")
install.packages(c("BH", "DBI", "Matrix", "R6", "RCurl", "Rcpp", "cluster", "curl", "digest", "evaluate", "formatR", "ggplot2", "gtable", "highr", "htmltools", "httr", "jsonlite", "knitr", "lubridate", "memoise", "munsell", "nlme", "rmarkdown", "scales", "shiny", "survival", "swirl", "testthat", "zoo"))
boston = read.csv("boston.csv")
str(boston)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 4 Trees")
boston = read.csv("boston.csv")
str(boston)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col="blue", pch=19)
points(boston$LON[boston$TRACT==3531],boston$LAT[boston$TRACT==3531],col="red", pch=20)
summary(boston$NOX)
points(boston$LON[boston$NOX>=0.55], boston$LAT[boston$NOX>=0.55], col="green", pch=20)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch=20)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 4 Homework")
gerber <- read.csv("gerber.csc")
gerber <- read.csv("gerber.csv")
table(gerber$voting)/nrow(gerber)
table(gerber$voting, gerber$civicduty)
table(gerber$voting, gerber$civicduty == 1)
nrow(gerber[gerber$civicduty == 1])
nrow(gerber["civicduty" == 1])
table(gerber$voting)
table(gerber$voting[gerber$civicduty == 1])
12021/(12021+26197)
table(gerber$voting[gerber$hawthorne == 1])
table(gerber$voting[gerber$self == 1])
== 1])
table(gerber$voting[gerber$neighbors == 1])
table(gerber$voting[gerber$hawthorne == 1])
12316/(12316 + 25888)
table(gerber$voting[gerber$self == 1])
13191/(13191+25027)
table(gerber$voting[gerber$neighbors == 1])
14438/(14438+23763)
tapply(gerber$voting, gerber$civicduty, mean)
tapply(gerber$voting, gerber$hawthorne, mean)
tapply(gerber$voting, gerber$self, mean)
tapply(gerber$voting, gerber$neighbors, mean)
gerberLog <- glm(voting ~., data = gerber, method = binomial)
summary(gerberLog)
gerberLog <- glm(voting ~., data = gerber, family = binomial)
summary(gerberLog)
gerberLog <- glm(voting ~ civicdut + hawthorne + self + neighbors, data = gerber, family = binomial)
gerberLog <- glm(voting ~ civicduty + hawthorne + self + neighbors, data = gerber, family = binomial)
summary(gerberLog)
predLog <- predict(gerberLog)
table(gerber$voting, predLog > 0.3)
predLog <- predict(gerberLog, type = "response")
table(gerber$voting, predLog > 0.3)
(51966 + 134513)/nrow(gerber)
table(gerber$voting, predLog > 0.5)
predLog <- predict(gerberLog, type = "response")
table(gerber$voting, predLog > 0.5)
235388/nrow(gerber)
library(ROCR)
predROC <- prediction(gerberLog, gerber$voting)
predROC <- prediction(predLog, gerber$voting)
as.numeric(performance(ROCRpred, "auc")@y.values)
as.numeric(performance(predROC, "auc")@y.values)
library(caret)
library(rpart)
library(rpart.plot)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(CARTmodel)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
gerber$sex <- as.factor(gerber$sex)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
str(gerber)
CARTModel4 <- rpart(voting ~ control + sex, data = gerber, cp = 0.0)
prp(CARTModel4)
gerber$sex <- as.integer(gerber$sex)
CARTModel4 <- rpart(voting ~ control + sex, data = gerber, cp = 0.0)
prp(CARTModel4)
gerber <- read.csv("gerber.csv")
CARTModel4 <- rpart(voting ~ control + sex, data = gerber, cp = 0.0)
prp(CARTModel4)
prp(CARTModel4, digits = 6)
CARTModel4 <- rpart(voting ~ control, data = gerber, cp = 0.0)
prp(CARTModel4, digits = 6)
abs(0.296638 - 0.34)
CARTModel5 <- rpart(voting ~ control + sex, data = gerber, cp = 0.0)
prp(CARTModel5)
prp(CARTModel5, digits = 6)
0.334176-0.290456
0.345818-0.302795
LogSexControl <- glm(voting ~ control + selx, data = gerber, family = binomial)
LogSexControl <- glm(voting ~ control + sex, data = gerber, family = binomial)
summary(LogSexControl)
Possibilities = data.frame(sex=c(0,0,1,1),control=c(0,1,0,1))
predict(LogSexControl, newdata=Possibilities, type="response")
abs(0.2908065-0.290456)
LogModel2 = glm(voting ~ sex + control + sex:control, data=gerber, family="binomial")
summary(LogModel2)
predict(LogModel2, newdata=Possibilities, type="response")
abs(0.2904558-0.290456)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 4 Homework")
letters <- read.csv("letters_ABPR.csv")
letters$isB = as.factor(letters$letter == "B")
library(caTools)
spl <- sample.split(letters$isB, SplitRatio = 0.5)
lettersTrain <- subset(letters, spl == T)
lettersTest <- subset(letters, spl == F)
table(letters$isB)
table(lettersTest$isB)
1175/nrow(lettersTest)
train <- subset(letters, spl == T)
test <- subset(letters, spl == F)
est$isB
table(test$isB)
1175/nrow(test)
library(rpart)
library(rpart.plot)
CARTb = rpart(isB ~ . - letter, data=train, method="class")
predb <- predict(CARTb, newdata = test, type = "class")
table(test$isB, predb)
(1135+313)/nrow(test)
library(randomForest)
library(ggplot2)
library(randomForest)
forestmodel <- randomForest(isB ~. -letter, data = train, type = "class")
predForest <- predict(forestmodel, newdata = test, type = "class")
table(test$isB, predForest)
(1167+361)/nrow(test)
letters$letter = as.factor( letters$letter )
set.seed(2000)
spl2 <- sample.split(letters$letter, SplitRatio = 0.5)
train2 <- subset(letters, spl2 == T)
test2 <- subset(letters, spl2 == F)
table(letters$letter)
table(test$letter)
404/nrow(test)
table(test2$letter)
404/nrow(test2)
letterMod <- rpart(letter ~. -isB, data = trian2, method = "class")
letterMod <- rpart(letter ~. -isB, data = train2, method = "class")
predMult <- predict(letterMod, newdata = test2, type = "class")
table(test2$letter, predMult)
(348+318+363+340)/nrow(test2)
set.seed(1000)
letterForest <- randomForest(letter ~. -isB, data = train2, method = "class")
predLetter <- predict(letterForest, newdata = test2, type = "class")
table(test2$letter, predLetter)
(390+380+393+364)/nrow(test2)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 4 Homework")
census <- read.csv("census.csv")
library(caTools)
set.seed(2000)
spl <- sample.split(census$over50k, SplitRatio = 0.6)
train <- subset(census, spl == T)
test <- subset(census, spl == F)
Log <- glm(over50k ~., data = census, family = binomial)
summary(Log)
summary(Log)
Log <- glm(over50k ~., data = train, family = binomial)
summary(Log)
predLog <- predict(Log, newdata = test, type = "response")
table(test$over50k, predLog)
table(test$over50k, predLog > 0.5)
(1888+9051)/nrow(test)
table(test$over50k)
9713/12791
library(ROCR)
ROCLog <- prediction(predLog, test$over50k)
as.numeric(performance(ROCLog,"auc")@y.values)
library(rpart)
library(rpart.plot)
CARTMod <- rpart(over50k ~., method = "class", data = train)
prp(CARTMod)
PredCART <- predict(CARTMod, type = "class", newdata = test)
table(test$over50k, PredCART)
(9243+1596)/nrow(test)
PredCART2 <- predict(CARTMod, newdata = test)
ROCCART <- prediction(PredCART2, test$over50k)
plot (performance(PredCART2, "tpr", "fpr") , colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
plot (performance(ROCCART, "tpr", "fpr") , colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
PredCART2 <- predict(CARTMod, newdata = test)
ROCCART <- prediction(PredCART2, test$over50k)
ROCCART <- prediction(PredCART2[,2], test$over50k)
plot (performance(ROCCART, "tpr", "fpr") , colorize = TRUE, print.cutoffs.at = seq(0,1,0.1), text.adj = c(-0.2,1.7))
PredCART2
head(PredCART2)
as.numeric(performance(ROCCART, "auc")@y.values)
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
library(randomForest)
set.seed(1)
ForestMod <- randomForest(over50k ~., data = trainSmall, method = "class")
predForest <- predict(ForestMod, newdata = test, type = "class")
predForest <- predict(ForestMod, newdata = test)
table(test$over50k, predForest>0.5)
predForest <- predict(ForestMod, newdata = test, type = "class")
table(test$over50k, predForest)
(9585+1092)/nrow(test)
vu = varUsed(ForestMod, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(ForestMod$forest$xlevels[vusorted$ix]))
varImpPlot(ForestMod)
set.seed(2)
library (caret)
library (e1071)
set.seed(2)
tr.control = trainControl(method = "cv", number = 10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
tr = train(over50k ~., data = train, method = "rpart", trControl = tr.control, tuneGrid = cartGrid)
tr
CartNew <- rpart(over50k ~., data = train, method = "class")
prp(Cartnew)
prp(CartNew)
CartNew <- rpart(over50k ~., data = train, method = "class", cp = 0.002)
predictinnew <- predict(CartNew, newdata = test, type = "class")
predictionnew <- predict(CartNew, newdata = test, type = "class")
table(test$over50k, predictionnew)
(1838+9178)/nrow(test)
prp(CartNew)
