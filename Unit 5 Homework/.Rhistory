geom_point()
# Copy, paste and expand previous command to include the lines of the linear models, per cyl
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() +
geom_smooth(method = "lm", se = F)
# Copy, paste and expand previous command to include a lm for the entire dataset in its whole
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() +
geom_smooth(method = "lm", se = F) +
geom_smooth(method = "lm", se = F, aes(group = 1), linetype = 2)
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() +
geom_smooth(method = "lm", se = T)
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point() +
geom_smooth(method = "lm", se = F)
# Define a hexadecimal color
my_color <- "#123456"
# Set the color aesthetic
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point()
# Set the color aesthetic and attribute
ggplot(mtcars, aes(x = wt, y = mpg, col = cyl)) +
geom_point(col = my_color)
# Set the fill aesthetic and color, size and shape attributes
ggplot(mtcars, aes(x = wt, y = mpg, fill = cyl)) +
geom_point(size = 10, shape = 23, col = my_color)
# Base layers
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
# Add geom (position = "stack"" by default)
cyl.am + geom_bar()
# Fill - show proportion
cyl.am + geom_bar(position = "fill")
# Dodging - principles of similarity and proximity
cyl.am + geom_bar(position = "dodge")
# Clean up the axes with scale_ functions
val = c("#E41A1C", "#377EB8")
lab = c("Manual", "Automatic")
cyl.am +
geom_bar(position = "dodge") +
scale_x_discrete("Cylinders") +
scale_y_continuous("Number") +
scale_fill_manual("Transmission", values = val, labels = lab)
# Make a univariate histogram
ggplot(mtcars, aes(x = mpg)) + geom_histogram()
# Change the bin width to 1
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 1)
# Change the y aesthetic to density
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 1, aes(y = ..density..))
# Custom color code
myBlue <- "#377EB8"
# Change the fill color to myBlue
ggplot(mtcars, aes(x = mpg)) + geom_histogram(binwidth = 1, aes(y = ..density..), fill = myBlue)
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
library(mtcars)
mtcars
str(mtcars)
mtcars$cyl <- as.numeric(mtcars$cyl)
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
mtcars$cyl <- as.numeric(mtcars$cyl)
str(mtcars)
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar()
cyl.am <- ggplot(mtcars, aes(x = factor(cyl), fill = factor(am)))
cyl.am + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am)) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am)) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
mtcars$cyl <- as.factor(mtcars$cyl)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(a)) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(a))) + geom_bar(position = "dodge")
# Draw a bar plot of cyl, filled according to am
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
# Change the position argument to stack
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack")
# Change the position argument to fill
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "fill")
# Change the position argument to dodge
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar()
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "fill")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge")
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ...density...))
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "stack", aes(y = ..density..))
posn_d <- position_dodge(width = 0.2)
ggplot(mtcars, aes(x = cyl, fill = am)) + geom_bar(position = posn_d, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
# Define posn_d with position_dodge()
posn_d <- position_dodge(width = 0.2)
# Use posn_d as position and adjust alpha to 0.6
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# Notice the difference
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge",  alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = "dodge", width = 0.2, alpha = 0.6)
ggplot(mtcars, aes(x = cyl, fill = factor(am))) + geom_bar(position = posn_d, alpha = 0.6)
# A basic histogram, add coloring defined by cyl
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1)
# Change position to identity
ggplot(mtcars, aes(mpg, fill = cyl)) +
geom_histogram(binwidth = 1, position = "identity")
# Change geom to freqpoly (position is identity by default)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1) +
geom_histogram(binwidth = 1, position = "identity", aes(fill = cyl))
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 2)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 2)
geom_freqpoly(binwidth = 1)
ggplot(mtcars, aes(mpg, col = cyl)) +
geom_freqpoly(binwidth = 1)
# Example of how to use a brewed color palette
ggplot(mtcars, aes(x = cyl, fill = am)) +
geom_bar() +
scale_fill_brewer(palette = "Set1")
# Use str() on Vocab to check out the structure
str(Vocab)
# Plot education on x and vocabulary on fill
# Use the default brewed color palette
ggplot(Vocab, aes(x = education, fill = vocabulary)) +
geom_bar(position = "fill") +
scale_fill_brewer()
# Change the position argument to "identity" and set alpha to 0.4
ggplot(mtcars, aes(x = mpg, fill = am)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Change fill to cyl
ggplot(mtcars, aes(x = mpg, fill = cyl)) + geom_histogram(position = "identity", alpha = 0.4, binwidth = 1)
# Expand the following command with geom_rect() to draw the recess periods
ggplot(economics, aes(x = date, y = unemploy/pop)) +
geom_line() +
geom_rect(data = recess, inherit.aes = FALSE,
aes(xmin = begin, xmax = end, ymin = -Inf, ymax = +Inf),
fill = "red", alpha = 0.2)
mtcars$cyl <- as.factor(mtcars$cyl)
plot(mtcars$wt, mtcars$mpg, col = mtcars$cyl)
abline(lm(mpg ~ wt, data = mtcars), lty = 2)
lapply(mtcars$cyl, function(x) {
abline(lm(mpg ~ wt, mtcars, subset = (cyl == x)), col = x)
})
par(2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(1,2)
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
?par
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
par(op)
par(mfrow = c(1,2))
ggplot(mtcars, aes(x = wt, y = mpg)) +
geom_smooth(method = "lm", se = FALSE)
ggplot(mtcars, aes(x = wt, y = mpg)) +
stat_smooth(method = "lm",se = FALSE)
myColors <- c("#1B9E77", "#D95F02", "#7570B3", "black")
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
# Add col to the aes() function in the second stat_smooth(), set it to "All". This will name the line properly.
# Remove the col attribute in the second stat_smooth(). Otherwise, it will overwrite the col aesthetic.
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F) +
stat_smooth(method = "loess",
# Add col inside aes()
aes(group = 1, col = "All"),
# Remove the col argument below
se = F, span = 0.7)
brewer.pal(3, "Dark2")
library(RColorBrewer)
# Add a scale layer: scale_color_manual() with the first argument set to "Cylinders" and values set to the predfined myColors variable
myColors <- c(brewer.pal(3, "Dark2"), "black")
ggplot(mtcars, aes(x = wt, y = mpg, col = factor(cyl))) +
geom_point() +
stat_smooth(method = "lm", se = F, span = 0.75) +
stat_smooth(method = "loess",
aes(group = 1, col="All"),
se = F, span = 0.7) +
# Add correct arguments to scale_color_manual
scale_color_manual("Cylinders", values = myColors)
getwd()
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/USDA.csv")
load("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Stock Dynamics/CocaColaStock.csv")
iris
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/State Data (OPTIONAL)")
data(state)
statedata = cbind(data.frame(state.x77), state.abb, state.area, state.center,  state.division, state.name, state.region)
View(statedata)
str(statedata)
plot(statedata$x, statedata$y)
tapply(statedata$HS.Grad, statedata$state.area, max)
max(tapply(statedata$HS.Grad, statedata$state.area, mean))
max(tapply(statedata$HS.Grad, statedata$division.area, mean))
max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.division, mean))
which.max(tapply(statedata$HS.Grad, statedata$state.region, mean))
?boxplot
boxplot(Murder ~ region, data = statedata)
boxplot(Murder ~ state.region, data = statedata)
subset(statedata$Murder, statedata$state.region == "Northeast")
subset(statedata, statedata$state.region == "Northeast")
str(statedata)
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Poupulation + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
LifeModel <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LifeModel)
LinReg <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost + Area, data = statedata)
summary(LinReg)
plot(statedata$Income, statedata$Life.Exp)
LinReg2 <- lm(Life.Exp ~ Population + Income + Illiteracy +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg2)
LinReg3 <- lm(Life.Exp ~ Population + Income +
Murder + HS.Grad + Frost, data = statedata)
summary(LinReg3)
LinReg4 <- lm(Life.Exp ~ Population + Murder + HS.Grad + Frost, data = statedata)
summary(LinReg4)
predict(LinReg4)
sort(predict(LinReg4))
which.min(statedata$Life.Exp)
statedata$state.division[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp)]
statedata[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp), ]
statedata$state.name[which.min(statedata$Life.Exp)]
sort(predict(LinReg4))
statedata$state.name[which.max(statedata$Life.Exp)]
predict(LinReg4)$residuals
predict(LinReg4)$residual
predict(LinReg4)
str(predict(LinReg4))
sort(abs(predict(LinReg4)-statedata$Life.Exp))
sort(abs(LinReg4$residuals))
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 2 Homework/Forecasting Elantra Sales (OPTIONAL)")
elantra <- read.csv("elantra.csv")
elantraTrain <- subset(elantra, Year <= 2012)
elantraTest<- subset(elantra, Year > 2012)
View(elantraTest)
View(elantraTest)
summary(elantraTrain)
str(elantraTrain)
ElaReg <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElaReg)
ElantraLM <- lm(ElantraSales ~ Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM)
ElantraLM2 <- lm(ElantraSales ~ Month + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM2)
110.69 * 2
110.69 * 5
110.69 * 4
ElantraLM3 <- lm(ElantraSales ~ as.factor(Month) + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
elantraTest$MonthFactor = as.factor(elantraTest$Month)
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
cor(elantraTrain)
elantraTrain <- subset(elantra, Year <= 2012)
cor(elantraTrain)
elantraTrain$MonthFactor = as.factor(elantraTrain$Month)
cor(elantraTrain)
cor(ElantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
cor(elantraTrain[c("Unemployment","Month","Queries","CPI_energy","CPI_all")])
ElantraLM3 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy + Queries, data = elantraTrain)
summary(ElantraLM3)
ElantraLM4 <- lm(ElantraSales ~ MonthFactor + Unemployment + CPI_all + CPI_energy, data = elantraTrain)
summary(ElantraLM4)
ElantraPre <- predict(ElantraLM4, newdata = elantraTest)
sum((ElantraPre - elantraTest$ElantraSales))
sum((ElantraPre - elantraTest$ElantraSales)^2)
mean(elantraTrain$ElantraSales)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
1-(SSE/SST)
SST = sum((ElantraPre - mean(elantraTrain$ElantraSales))^2)
1-(SSE/SST)
SSE = sum((ElantraPre - elantraTest$ElantraSales)^2)
SST = sum((ElantraPre - 14462.25)^2)
1-(SSE/SST)
1-SSE/SST
SST = sum((elantraTest$ElantraSales - 14462.25)^2)
1-SSE/SST
sort(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest$Month[14]
elantraTest[14, ]
max(abs(ElantraPre - elantraTest$ElantraSales))
which.max(abs(ElantraPre - elantraTest$ElantraSales))
elantraTest[5, ]
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 5 Homework")
wiki = read.csv("wiki.csv")
wiki = read.csv("wiki.csv", stringsAsFactors = F)
wiki$Vandal = as.factor(wiki$Vandal)
table(wiki$vandal)
str(wiki)
table(wiki$Vandal)
library(tm)
library(NLP)
library(tm)
corpusAdded = Corpus(VectorSource(wiki$Added))
corpusAdded = tm_map(corpusAdded, removeWords, stopwords("en"))
corpusAdded = tm_map(corpusAdded, stemDocument)
dtmAdded = DocumentTermMatrix(corpusAdded)
dtmAdded
dtm = removeSparseTerms(dtmAdded, 0.997)
corpusAdded = Corpus(VectorSource(wiki$Added))
corpusAdded = tm_map(corpusAdded, removeWords, stopwords("en"))
corpusAdded = tm_map(corpusAdded, stemDocument)
dtmAdded = DocumentTermMatrix(corpusAdded)
sparseAdded = removeSparseTerms(dtmAdded, 0.997)
sparseAdded
wordsAdded = as.data.frame(as.matrix(sparseAdded))
str(wordsAdded)
colnames(wordsAdded) = paste("A", colnames(wordsAdded))
str(wordsAdded)
corpusRemoved = Corpus(VectorSource(wiki$Removed))
corpusRemoved = tm_map(corpusRemoved, reomoveWords, stopwords("en"))
corpusRemoved = tm_map(corpusRemoved, removeWords, stopwords("en"))
corpusRemoved = tm_map(corpusRemoved, removeWords, stopwords("en"))
corpusRemoved = Corpus(VectorSource(wiki$Removed))
corpusRemoved = tm_map(corpusRemoved, removeWords, stopwords("en"))
corpusRemoved = tm_map(corpusRemoved, stemDocument)
dtmRemoved = DocumentTermMatrix(corpusRemoved)
sparseRemoved = removeSparseTerms(dtmRemoved, 0.997)
wordsRemoved = as.data.frame(as.matric(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
str(wordsRemoved)
wordsRemoved = as.data.frame(as.matrix(sparseRemoved))
colnames(wordsRemoved) = paste("R", colnames(wordsRemoved))
str(wordsRemoved)
str(wiki)
wikiWords = cbind(wordsAdded, wordsRemoved)
wikiWords = cbind(wikiWords, wiki$Vandal)
str(wikiWords)
set.seed(123)
names(wikiWords$`wiki$Vandal`) = "Vandal"
set.seed(123)
wikiWords$Vandal = wiki$Vandal
spl = split.sample(wikiWords$Vandal, 0.7)
librayr(caTools)
library(caTools)
set.seed(123)
spl = sample.split(wikiWords$Vandal, 0.7)
train = sample(wikiWords, spl = T)
train = sample(wikiWords, spl == T)
train = subset(wikiWords, spl == T)
test = subset(wikiWords, spl == F)
table(test$Vandal)
618/(618+545)
library(rpart)
library(rpart.plot)
wikiCART = rpart(Vandal ~., data = train)
predCART = predict(wikiCART, newdata = test)
table(test$Vandal, predCART >= 0.5)
pred.prob = predCART[,2]
table(test$Vandal, pred.prob >= 0.5)
wikiCART = rpart(Vandal ~., data = train, type = "class")
predCART = predict(wikiCART, newdata = test, type = "class")
table(test$Vandal, predCART)
train = subset(wikiWords, spl == T)
test = subset(wikiWords, spl == F)
table(test$Vandal)
618/(618+545)
library(rpart)
library(rpart.plot)
wikiCART = rpart(Vandal ~., data = train, method = "class")
predCART = predict(wikiCART, newdata = test, type = "class")
table(test$Vandal, predCART)
set.seed(123)
spl = sample.split(wikiWords$Vandal, 0.7)
train = subset(wikiWords, spl == T)
test = subset(wikiWords, spl == F)
table(test$Vandal)
618/(618+545)
wikiCART = rpart(Vandal ~., data = train, method = "class")
predCART = predict(wikiCART, newdata = test, type = "class")
table(test$Vandal, predCART)
prp(wikiCART)
wikiCART = rpart(Vandal~., data = train, method = "class")
prp(wikiCART)
wikiWords$Vandal = wiki$Vandal
wikiWords = cbind(wordsAdded, wordsRemoved)
wikiWords$Vandal = wiki$Vandal
library(caTools)
set.seed(123)
spl = sample.split(wikiWords$Vandal, 0.7)
train = subset(wikiWords, spl == T)
test = subset(wikiWords, spl == F)
table(test$Vandal)
wikiCART = rpart(Vandal~., data = train, method = "class")
prp(wikiCART)
predCART = predict(wikiCART, newdata = test, type = "class")
table(test$Vandal, predCART)
(12+618)/nrow(test)
wikiWords2 = wikiWords
wikiWords2$HTTP = ifelse(grepl("http",wiki$Added,fixed=TRUE), 1, 0)
table(wikiWords2$HTTP)
wikiTrain2 = subset(wikiWords2, spl==TRUE)
wikiTest2 = subset(wikiWords2, spl==FALSE)
wikiCART2 = rpart(Vandal~., data = wikiTrain2, method = "class")
prp(wikiCART2)
predCART2 = predict(wikiCART2, newdata = wikiTest2)
head(predCART2)
pred.prob = predCART2[,2]
table(test$Vandal, pred.prob >= 0.5)
(57+609)/nrow(wikiTest2)
wikiWords2$NumWordsAdded = rowSums(as.matrix(dtmAdded))
wikiWords2$NumWordsRemoved = rowSums(as.matrix(dtmRemoved))
mean(wikiWords2$NumWordsAdded)
tain3 = subset(wikiWords2, spl == T)
test3 = subset(wikiWords2, spl == F)
wikiCART3 = rpart(Vandal~., data = train3, method = "class")
prp(wikiCART3)
train3 = subset(wikiWords2, spl == T)
wikiCART3 = rpart(Vandal~., data = train3, method = "class")
prp(wikiCART3)
pred3 = predict(wikiCART3, newdata = test3, type = "class")
table(test3$Vandal, pred3)
(514+248)/nrow(test3)
wikiWords3 = wikiWords2
wikiWords3$Minor = wiki$Minor
wikiWords3$Loggedin = wiki$Loggedin
train4 = subset(wikiWords3, spl == T)
test4 = subset(wikiWords3, spl == F)
wikiCART4 = rpart(Vandal~., data = train4, method = "class")
prp(wikiCART4)
pred4 = predict(wikiCART3, newdata = test4, type = "class")
table(test4$Vandal, pred4)
table(test4$Vandal, pred4)
(514+248)/nrow(test4)
wikiWords3 = wikiWords2
wikiWords3$Minor = wiki$Minor
wikiWords3$Loggedin = wiki$Loggedin
train4 = subset(wikiWords3, spl == T)
test4 = subset(wikiWords3, spl == F)
wikiCART4 = rpart(Vandal~., data = train4, method = "class")
prp(wikiCART4)
pred4 = predict(wikiCART4, newdata = test4, type = "class")
table(test4$Vandal, pred4)
(595+248)/nrow(test4)
prp(wikiCART4)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 5 Homework")
