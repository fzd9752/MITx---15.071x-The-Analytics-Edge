read.table("http://www.amstat.org/publications/jse/datasets/body.dat.txt")
dim(body)  #Check that dimensions are 507  25
BodyMeasurements <- c("Biacromial_diameter","Biiliac_diameter",
"Bitrochanteric_diameter", "Chest_depth","Chest_diameter",
"Elbow_diameter","Wrist_diameter", "Knee_diameter","Ankle_diameter",
"Shoulder_girth","Chest_girth", "Waist_girth","Navel_girth",
"Hip_girth","Thigh_girth", "Bicep_girth","Forearm_girth",
"Knee_girth","Calf_max_girth", "Ankle_min_girth","Wrist_min_girth",
"Age","Weight","Height","Gender")
names(body) <- BodyMeasurements
#The appropriate variable type of gender is factor
body$Gender <- as.factor(body$Gender)
summary(body$Gender)
hist(body$Shoulder_girth)
boxplot(body$Shoulder_girth~body$Gender)
hist(body$Shoulder_girth[body$Gender==1])
t.test(body$Shoulder_girth ~ body$Gender, var.equal=T)
set.seed(200)
instrument1 <- round(rnorm(20,6,0.5),3)
instrument2 <- round(rnorm(20,6,2),3)
comparemethods <- cbind(instrument1, instrument2); boxplot(comparemethods)
cv <- function(x){}
cv <- function(x){
sd(x)/mean(x)*100
}
cv(instrument1)
cv(instrument2)
file.list()
list.files()
install.packages("ggplot2")
install.packages("swirl")
library("swirl")
swirl()
install.packages("rafalib")
swirl()
version
x <- c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean(c)
mean(x)
help(for)
help(mean)
y = c(1:25)
for (num in y) {
total += num^2
for (num in y) {
total = total+num^2
}
total = 0
for (num in y) {
total = total+num^2
}
total
for (num in 1:25)
total <- total+num^2
total
class(cars)
nrow(cars)
colnames(cars[,2])
colnames(cars[2])
names(cars)[2]
mean(cars[,2])
view(cars)
views(cars)
cars
which(cars[,2] == 85)
search()
library("ggplot2")
search()
install.packages("readr")
library(readr)
install.packages("data.table")
install.packages("dplyr")
install.packages("data.table")
library(hflights)
a <- c(3, 7, 2, 4)
sum((a-4)^2)
install.packages("ggvis")
library(ggvis)
library(mtcar)
library("mtcars")
mtcars
mtcars %>% ggvis(~wt, ~mpg, fill := "blue") %>% layer_points()
# Change the code below to make a graph with red points
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points()
# Change the code below draw smooths instead of points
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()
# Change the code below to make a graph containing both points and a smoothed summary line
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points(), layer_smooths()
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_smooths()
mtcars %>% ggvis(~wt, ~mpg) %>% layer_points() %>% layer_smooths()
?factorial
knit_with_parameters('~/Documents/MOOC/1. R/Reporting/Reporting with R Markdwon.Rmd')
cat(c("```{r simple_sum, results = 'hide'}
2 + 2
```"),
sep = '\n')
2 + 2
library(knitr)
library(rmarkdown)
# Chunk 1
cat(c("```{r}
# some code
```"),
sep = '\n')
# Chunk 2
cat(c("```{r warning = FALSE, error = FALSE}
"four" + "five"
```"),
sep = '\n')
# Chunk 1
cat(c("```{r}
# some code
```"),
sep = '\n')
# Chunk 2
cat(c("```{r warning = FALSE, error = FALSE}
"four" + "five"
```"),
sep = '\n')
library(dplyr)
install.packages(Rdocumentation)
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond",
"triangle-up", "triangle-down"))) %>%
layer_points()
library(ggvis)
library(dplyr)
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond",
"triangle-up", "triangle-down"))) %>%
layer_points()
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond", "triangle-up", "triangle-down"),
fill := input_select(label = "Choose color:",
choices = c("black", "red", "blue", "green")))) %>%
layer_points()
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond", "triangle-up", "triangle-down"),
fill = input_select(label = "Choose color:",
choices = c("black", "red", "blue", "green")))) %>%
layer_points()
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond", "triangle-up", "triangle-down")),
fill = input_select(label = "Choose color:",
choices = c("black", "red", "blue", "green"))) %>%
layer_points()
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond", "triangle-up", "triangle-down")),
fill := input_select(label = "Choose color:",
choices = c("black", "red", "blue", "green"))) %>%
layer_points()
# Build a histogram of the waiting variable of the faithful data set.
faithful %>%
ggvis(~waiting) %>%
layer_histograms()
# Build the same histogram, but with a binwidth (width argument) of 5 units
faithful %>%
ggvis(~waiting) %>%
layer_histograms(width = 5)
mtcars %>%
ggvis(~mpg, ~wt, fill := input_radiobuttons(label = "Choose color:",
choices = c("black", "red", "blue", "green"))) %>%
layer_points()
# Build a histogram of the waiting variable of the faithful data set.
faithful %>%
ggvis(~waiting) %>%
layer_histograms()
# Build the same histogram, but with a binwidth (width argument) of 5 units
faithful %>%
ggvis(~waiting) %>%
layer_histograms(width = 5)
mtcars %>%
ggvis(~mpg, ~wt,
fill := input_text("black", label = "Choose color:")) %>%
layer_points()
mtcars %>%
ggvis(~mpg, ~wt,
fill := input_text("black", label = "Choose color:")) %>%
layer_points()
mtcars %>%
ggvis(input_select(map(names(mtcars))) %>%
layer_points()
mtcars %>%
ggvis(input_select(map(names(mtcars)), lablel = "Choose fill variable:") %>%
layer_points()
mtcars %>%
ggvis(input_select(map = names(mtcars), lablel = "Choose fill variable:") %>%
layer_points()
mtcars %>%
ggvis(input_select(map = names(mtcars), lablel = "Choose fill variable:")) %>%
layer_points()
mtcars %>%
ggvis(input_select(map = names(mtcars)), lablel = "Choose fill variable:") %>%
layer_points()
mtcars %>%
ggvis(input_select(lablel = "Choose fill variable:", map = names(mtcars))) %>%
layer_points()
mtcars %>%
ggvis(input_select(lablel = "Choose fill variable:", choices = (map = names(mtcars))) %>%
layer_points()
mtcars %>%
ggvis(input_select(lablel = "Choose fill variable:", choices = (map = names(mtcars)))) %>%
layer_points()
mtcars %>%
ggvis(input_select(choices = names(mtcars)),
lablel = "Choose fill variable:")) %>%
layer_points()
mtcars %>%
ggvis(input_select(choices = names(mtcars), label = "Choose fill variable:"),
input_select(choices = names(mtcars), label = "Choose fill variable:")
) %>%
layer_points()
mtcars %>%
ggvis(input_select(choices = names(mtcars), label = "Choose fill variable:", map = as.name),
input_select(choices = names(mtcars), label = "Choose fill variable:", map = as.name)
) %>%
layer_points()
mtcars %>%
ggvis(~mpg, ~wt,
fill = input_select(label = "Choose fill variable:",
choices = names(mtcars), map = as.name)) %>%
layer_points()
mtcars %>%
ggvis(~mpg) %>%
layer_histograms(width = input_numeric(1, label = "Choose a binwidth:"))
mtcars %>%
ggvis(~mpg) %>%
layer_histograms(width = input_slider(1,20, label = "Choose a binwidth:"))
faithful %>%
ggvis(~waiting, ~eruptions) %>%
layer_points() %>%
add_axis("x",
title = "Time since previous eruption (m)",
values = c(50, 60, 70, 80, 90),
subdivide = 9,
orient = "top") %>%
add_axis("y",
title = "Duration of eruption (m)",
values = c(2,3,4,5),
subdivide = 9,
orient = "right")
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~cyl) %>%
layer_points() %>%
add_relative_scales() %>%
add_legend("fill", title = "Cylinders",
properties = legend_props(
legend = list(
x = scaled_value("x_rel", 0.8),
y = scaled_value("y_rel", 1)
)
)
)
library(tidyr)
install.packages(tidyr)
install.packages("tidyr")
library(tidyr)
install.packages("lubridate")
library(lubridate)
library(tidyr)
install.packages("stringr")
install.packages("stringr")
library(stringr)
?markdown
??markdwon
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge")
ls()
IBM <- read.csv(IBMStock.csv)
IBM <- read.csv("IBMStock.csv")
GE <- read.csv("GEStock.csv")
CocaCola <- read.csv("CocaColaStock.csv")
ProcterGamble <- read.csv("ProcterGambleStock.csv")
Boeing <- read.csv("BoeingStock.csv")
str(Boeing)
IBM$Date = as.Date(IBM$Date, "%m/%d/%y")
GE$Date = as.Date(GE$Date, "%m/%d/%y")
CocaCola$Date = as.Date(CocaCola$Date, "%m/%d/%y")
ProcterGamble$Date = as.Date(ProcterGamble$Date, "%m/%d/%y")
Boeing$Date = as.Date(Boeing$Date, "%m/%d/%y")
str(Boeing)
summary(Boeing)
summary(IBM)
summary (GE)
summary(CocaCola)
summary(Boeing)
median(Boeing$StockPrice)
sd(ProcterGamble$StockPrice)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Stock Dynamics")
plot(CocaCola$Date, CocaCola$StockPrice, type = 'l')
CocaCola[which.max(CocaCola$StockPrice)]
which.max(CocaCola$StockPrice)
CocaCola[which.max(CocaCola$StockPrice), ]
CocaCola[which.min(CocaCola$StockPrice), ]
lines(ProcterGamble$Date, ProcterGamble$StockPrice)
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'red')
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'red', lty=2)
plot(CocaCola$Date, CocaCola$StockPrice, type = 'l')
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'red', lty = 2)
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("1983-01-01")), lwd=2)
abline(v=as.Date(c("1983-12-01")), lwd=2)
plot(CocaCola$Date, CocaCola$StockPrice, type = 'l', col = 'green')
abline(v=as.Date(c("1983-01-01")), lwd=2, col = 'blue')
abline(v=as.Date(c("1983-01-01")), lwd=2, col = 'blue')
plot(CocaCola$Date, CocaCola$StockPrice, type = 'l', col = 'green')
lines(ProcterGamble$Date, ProcterGamble$StockPrice, col = 'red', lty = 2)
abline(v=as.Date(c("2000-03-01")), lwd=2)
abline(v=as.Date(c("1983-01-01")), lwd=1, col = 'blue')
abline(v=as.Date(c("1983-12-01")), lwd=1, col = 'blue')
require(RCurl)
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
abline(v = v=as.Date(c("2000-03-01"), col = 'purple', lty = 2)
abline(v=as.Date(c("2000-03-01"), col = 'purple', lty = 2)
abline(v=as.Date(c("2000-03-01")), col = 'purple', lty = 2)
abline(v=as.Date(c("2000-03-01")), col = 'purple', lty = 2)
lines(GE$Date[301:432], GE$StockPrice[301:432], type="l", col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], type="l", col="green")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], type="l", col="purple")
plot(CocaCola$Date[301:432], CocaCola$StockPrice[301:432], type="l", col="red", ylim=c(0,210))
## line type: lty=2 will make the line dashed, lty=3 will make the line dotted,
##lty=4 will make the line alternate between dashes and dots, and lty=5 will make
##the line long-dashed
lines(GE$Date[301:432], GE$StockPrice[301:432], type="l", col="blue")
lines(ProcterGamble$Date[301:432], ProcterGamble$StockPrice[301:432], type="l", col="green")
lines(IBM$Date[301:432], IBM$StockPrice[301:432], type="l", col="purple")
lines(Boeing$Date[301:432], Boeing$StockPrice[301:432], type="l", col="orange")
abline(v=as.Date(c("2000-03-01")) , lty = 2)
abline(v=as.Date(c("1997-09-01")) , lty = 3)
abline(v=as.Date(c("1997-11-01")) , lty = 4)
tapply(IBM$StockPrice, months(IBM$Date), mean)
mean(IBM$StockPrice)
tapply(IBM$StockPrice, months(IBM$Date), mean) > mean(IBM$StockPrice)
tapply(CocaCola$StockPrice, months(CocaCola$Date), mean)
tapply(GE$StockPrice, months(GE$Date), mean)
max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))
max(tapply(GE$StockPrice, months(GE$Date), mean))
which.max(tapply(CocaCola$StockPrice, months(CocaCola$Date), mean))
which.max(tapply(GE$StockPrice, months(GE$Date), mean))
tapply(IBM$StockPrice, months(IBM$Date), mean) > mean(IBM$StockPrice)
tapply(ProcterGamble$StockPrice, months(ProcterGamble$Date), mean)
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Demographics and Employment in the United States")
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Demographics and Employment in the United States")
CPS <- read.csv("CPS.csv")
CPS <- read.csv("CPSData.csv")
str(CPS)
which.max(CPS$Industry)
max(CPS$Industry)
summary(CPS)
sort(table(CPS$Region))
sort(table(CPS$State))
mean(CPS$Citizenship)
table(CPS$Citizenship)
CPS$Citizenship[3]
table(CPS$Citizenship)[3]
CPS$Citizenship["Non-Citizen"]
Non-Citizen
CPS$Citizenship["Naturalized Non-Citizen"]
1-(7590/(sum(CPS$Citizenship)))
1-(7590/(nrow(CPS$Citizenship)))
1-(7590/131302)
tapply(CPS$Hispanic, CPS$Race, sum)
tapply(CPS$Hispanic[CPS$Hispanic == T], CPS$Race, sum)
summary(CPS$Hispanic)
str(CPS$Hispanic)
tapply(CPS$Hispanic[CPS$Hispanic == 1], CPS$Race, sum)
CPS$Hispanic[CPS$Hispanic == 1]
tapply(subset(CPS$Hispanic, CPS$Hispanic == 1), CPS$Race, sum)
CPSHisp <- subset(c(CPS$Hispanic, CPS$Race), CPS$Hispanic == 1)
head(CPSHisp)
CPSHisp
CPSHisp <- subset(CPS, CPS$Hispanic == 1)
head(CPSHisp)
tapply(CPS$Hispanic, CPS$Race, sum)
tapply(CPSHisp$Hispanic, CPSHisp$Race, sum)
rm(CPSHisp)
table(CPS$Race, CPS$Hispanic)
tapply(CPS$Hispanic, CPS$Race, sum) > 250
str(CPA)
summary(CPS)
is.na(CPS$Married)
table(CPS$Region, is.na(CPS$Married))
table(CPS$Sex, is.na(CPS$Married))
table(CPS$Age, is.na(CPS$Married))
table(CPS$Citizenship, is.na(CPS$Married))
table(CPS$State, is.na(CPS$MetroAreaCode))
table(CPS$State, is.na(CPS$MetroAreaCode))[FALSE == 0]
str(table(CPS$State, is.na(CPS$MetroAreaCode))
)
table(CPS$Region, is.na(CPS$MetroAreaCode))
mean(CPS$State, is.na(CPS$MetroAreaCode))
mean(table(CPS$State, is.na(CPS$MetroAreaCode)))
tapply(is.na(CPS$MetroAreaCode), CPS$State, mean)
which.max(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean))
sort(tapply(is.na(CPS$MetroAreaCode), CPS$State, mean),decreasing = T)
read.csv("MetroAreaMapCode.csv")
MetroAreaMap <- read.csv("MetroAreaMapCodes.csv")
CountryMap <- read.csv("CountryCodes.csv")
str(MetroAreaMap)
str(CountryMap)
MetroAreaMap <- read.csv("MetroAreaMapCodes.csv")
MetroAreaMap <- read.csv("MetroAreaCodes.csv")
str(MetroAreaMap)
str(CountryMap)
CPS = merge(CPS, MetroAreaMap, by.x="MetroAreaCode", by.y="Code", all.x=TRUE)
head(CPS)
sum(is.na(CPS$MetroArea))
summary(CPS)
CPS$MetroArea
table(CPS$MetroArea)
sort(table(CPS$MetroArea))
CPS$MetroArea[c('Atlanta-Sandy Springs-Marietta, GA',
'Baltimore-Towson, MD','Boston-Cambridge-Quincy, MA-NH)',
'San Francisco-Oakland-Fremont, CA'), ]
'San Francisco-Oakland-Fremont, CA')]
'San Francisco-Oakland-Fremont, CA')]
'San Francisco-Oakland-Fremont, CA'), ]
CPS$MetroArea[c('Atlanta-Sandy Springs-Marietta, GA',
'Baltimore-Towson, MD','Boston-Cambridge-Quincy, MA-NH',
'San Francisco-Oakland-Fremont, CA'), ]
CPS$MetroArea[c('Atlanta-Sandy Springs-Marietta, GA',
'Baltimore-Towson, MD','Boston-Cambridge-Quincy, MA-NH',
'San Francisco-Oakland-Fremont, CA') ]
CPS$MetroArea['Atlanta-Sandy Springs-Marietta, GA']
sort(tapply(CPS$Hispanic, CPS$MetroArea, mean))
sort(tapply(CPS$Race == "Asian", CPS$MetroArea, mean))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = T))
sort(tapply(CPS$Education == "No high school diploma", CPS$MetroArea, mean, na.rm = T), decreasing = T)
names(CPS)
names(CountryMap)
CPS <- merge(CPS, CountryMap, by.x = "CountryOfBirthCode", by.y = "Code", all.x = T)
Str(CPS)
str(CPS)
sum(is.na(CPS$Country))
sort(table(CPS$Country), decreasing = T)
sort(table(CPS$Country), decreasing = T)[3]
subset(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA")
subset(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", na.rm = T)
subset(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", na.rm = T) = "United States"
subset(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", na.rm = T) != "United States"
)
mean(subset(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", na.rm = T) != "United States")
mean(subset(CPS$Country, CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", na.rm = T) != "United States",na.rm = T)
table(CPS$MetroArea == "New York-Northern New Jersey-Long Island, NY-NJ-PA", CPS$Country != "United States")
subset(CPS$MetroArea, CPS$Country == "India", na.rm = T)
table(subset(CPS$MetroArea, CPS$Country == "India"), na.rm = T)
str(subset(CPS$MetroArea, CPS$Country == "India"), na.rm = T)
summary(subset(CPS$MetroArea, CPS$Country == "India"), na.rm = T)
summary(subset(CPS$MetroArea, CPS$Country == "Brazil"), na.rm = T)
summary(subset(CPS$MetroArea, CPS$Country == "Somalia"), na.rm = T)
sort(tapply(CPS$Country == "India", CPS$MetroArea, sum, na.rm=TRUE))
setwd("~/Documents/MOOC/MITx - 15.071x The Analytics Edge/Unit 1 Homework/Internet Privacy Poll (OPTIONAL)")
poll <- read.csv("AnonymityPoll.csv")
summary(poll)
str(poll)
table(poll$Smartphone)
table(poll$State, poll$Region)
table(poll$State, poll$Region)[poll$Region != 0]
table(poll$State, poll$Region == "South")
table(poll$Smartphone == 0, poll$Internet.Use == 0)
table(poll$Smartphone == 1, poll$Internet.Use == 1)
)
table(poll$Smartphone, poll$Internet.Use)
sum(is.na(poll$Internet.Use))
sum(is.na(poll$Smartphone))
limited <- subset(poll, poll$Internet.Use == 1 | poll$Smartphone == 1)
str(limited)
is.na(limited)
summary(limited)
sum(limited$Info.On.Internet == 0)
sum(limited$Info.On.Internet == 11)
table(limited$Info.On.Internet)
mean(limited$Worry.About.Info == 1)
mean(limited$Worry.About.Info == 1, na.rm = T)
mean(limited$Worry.About.Info)
mean(limited$Worry.About.Info, na.rm = T)
mean(limited$Anonymity.Possible, na.rm = T)
mean(limited$Tried.Masking.Identity, na.rm = T)
summary(limited)
hist(limited$Age)
plot(limited$Age, limited$Info.On.Internet)
table(limited$Age, limited$Info.On.Internet)
table(nrow(limited$Age), nrow(limited$Info.On.Internet))
head(limited$Info.On.Internet)
sum(table(limited$Age, limited$Info.On.Internet))
table(limited$Age)
table(limited$Age, limited$Info.On.Internet) > 1
sum(table(limited$Age, limited$Info.On.Internet) > 1)
index <- table(limited$Age, limited$Info.On.Internet) > 1
table(limited$Age, limited$Info.On.Internet)[index]
sum(table(limited$Age, limited$Info.On.Internet)[index])
max(table(limited$Age, limited$Info.On.Internet))
table(limited$Age, limited$Info.On.Internet)[index]
jitter(c(1, 2, 3))
jitter(c(1, 2, 3))
plot(jitter(limited$Age), jitter(limited$Info.On.Internet))
tapply(limited$Info.On.Internet, limited$Smartphone, mean)
tapply(limited$Tried.Masking.Identity == 1, limited$Smartphone, mean)
tapply(limited$Tried.Masking.Identity == 1, limited$Smartphone, mean, na.rm = T)
tapply(limited$Tried.Masking.Identity == 1, limited$Smartphone, summary)
tapply(limited$Tried.Masking.Identity, limited$Smartphone, summary)
